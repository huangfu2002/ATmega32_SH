
Smart_Home_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00001256  000012ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000e2  008000e2  0000136c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001314  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000721  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094a  00000000  00000000  00002ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00003834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af8  00000000  00000000  00003ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000049c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 03 	call	0x7b4	; 0x7b4 <main>
      8a:	0c 94 29 09 	jmp	0x1252	; 0x1252 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC>:
#define degree_sysmbol 0xdf

void initADC()
{
	// Set the reference voltage to AVcc
	ADMUX |= (1 << REFS0);
      92:	87 b1       	in	r24, 0x07	; 7
      94:	80 64       	ori	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
	// Set the ADC prescaler to 128
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	87 60       	ori	r24, 0x07	; 7
      9c:	86 b9       	out	0x06, r24	; 6
	// Enable the ADC module
	ADCSRA |= (1 << ADEN);
      9e:	86 b1       	in	r24, 0x06	; 6
      a0:	80 68       	ori	r24, 0x80	; 128
      a2:	86 b9       	out	0x06, r24	; 6
      a4:	08 95       	ret

000000a6 <readADC>:
}

int readADC(int channel)
{
	// Set the channel to read
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
      a6:	97 b1       	in	r25, 0x07	; 7
      a8:	90 7f       	andi	r25, 0xF0	; 240
      aa:	8f 70       	andi	r24, 0x0F	; 15
      ac:	89 2b       	or	r24, r25
      ae:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b0:	8a e1       	ldi	r24, 0x1A	; 26
      b2:	8a 95       	dec	r24
      b4:	f1 f7       	brne	.-4      	; 0xb2 <readADC+0xc>
      b6:	00 c0       	rjmp	.+0      	; 0xb8 <readADC+0x12>
	_delay_us(10); // Add a short delay here
	// Start the conversion
	ADCSRA |= (1 << ADSC);
      b8:	86 b1       	in	r24, 0x06	; 6
      ba:	80 64       	ori	r24, 0x40	; 64
      bc:	86 b9       	out	0x06, r24	; 6
	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC));
      be:	36 99       	sbic	0x06, 6	; 6
      c0:	fe cf       	rjmp	.-4      	; 0xbe <readADC+0x18>
	// Read the ADC value
	uint16_t value = ADCL | (ADCH << 8);
      c2:	24 b1       	in	r18, 0x04	; 4
      c4:	85 b1       	in	r24, 0x05	; 5
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	98 2f       	mov	r25, r24
      ca:	88 27       	eor	r24, r24
	return value;
}
      cc:	82 2b       	or	r24, r18
      ce:	08 95       	ret

000000d0 <LCD_Command>:
#define RS PA3				/* Define Register Select pin */
#define EN PA2 				/* Define Enable signal pin */

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
      d0:	9b b3       	in	r25, 0x1b	; 27
      d2:	9f 70       	andi	r25, 0x0F	; 15
      d4:	28 2f       	mov	r18, r24
      d6:	20 7f       	andi	r18, 0xF0	; 240
      d8:	92 2b       	or	r25, r18
      da:	9b bb       	out	0x1b, r25	; 27
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
      dc:	9b b3       	in	r25, 0x1b	; 27
      de:	97 7f       	andi	r25, 0xF7	; 247
      e0:	9b bb       	out	0x1b, r25	; 27
	LCD_Port |= (1<<EN);		/* Enable pulse */
      e2:	9b b3       	in	r25, 0x1b	; 27
      e4:	94 60       	ori	r25, 0x04	; 4
      e6:	9b bb       	out	0x1b, r25	; 27
      e8:	32 e0       	ldi	r19, 0x02	; 2
      ea:	3a 95       	dec	r19
      ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Command+0x1a>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Command+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
      f0:	9b b3       	in	r25, 0x1b	; 27
      f2:	9b 7f       	andi	r25, 0xFB	; 251
      f4:	9b bb       	out	0x1b, r25	; 27
      f6:	ef e8       	ldi	r30, 0x8F	; 143
      f8:	f1 e0       	ldi	r31, 0x01	; 1
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Command+0x2a>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Command+0x30>
     100:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
     102:	2b b3       	in	r18, 0x1b	; 27
     104:	f0 e1       	ldi	r31, 0x10	; 16
     106:	8f 9f       	mul	r24, r31
     108:	c0 01       	movw	r24, r0
     10a:	11 24       	eor	r1, r1
     10c:	92 2f       	mov	r25, r18
     10e:	9f 70       	andi	r25, 0x0F	; 15
     110:	89 2b       	or	r24, r25
     112:	8b bb       	out	0x1b, r24	; 27
	LCD_Port |= (1<<EN);
     114:	8b b3       	in	r24, 0x1b	; 27
     116:	84 60       	ori	r24, 0x04	; 4
     118:	8b bb       	out	0x1b, r24	; 27
     11a:	32 e0       	ldi	r19, 0x02	; 2
     11c:	3a 95       	dec	r19
     11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Command+0x4c>
     120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_Command+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     122:	8b b3       	in	r24, 0x1b	; 27
     124:	8b 7f       	andi	r24, 0xFB	; 251
     126:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     128:	8f e9       	ldi	r24, 0x9F	; 159
     12a:	9f e0       	ldi	r25, 0x0F	; 15
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Command+0x5c>
     130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Command+0x62>
     132:	00 00       	nop
     134:	08 95       	ret

00000136 <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
     136:	9b b3       	in	r25, 0x1b	; 27
     138:	9f 70       	andi	r25, 0x0F	; 15
     13a:	28 2f       	mov	r18, r24
     13c:	20 7f       	andi	r18, 0xF0	; 240
     13e:	92 2b       	or	r25, r18
     140:	9b bb       	out	0x1b, r25	; 27
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
     142:	9b b3       	in	r25, 0x1b	; 27
     144:	98 60       	ori	r25, 0x08	; 8
     146:	9b bb       	out	0x1b, r25	; 27
	LCD_Port|= (1<<EN);
     148:	9b b3       	in	r25, 0x1b	; 27
     14a:	94 60       	ori	r25, 0x04	; 4
     14c:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14e:	32 e0       	ldi	r19, 0x02	; 2
     150:	3a 95       	dec	r19
     152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Char+0x1a>
     154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Char+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     156:	9b b3       	in	r25, 0x1b	; 27
     158:	9b 7f       	andi	r25, 0xFB	; 251
     15a:	9b bb       	out	0x1b, r25	; 27
     15c:	ef e8       	ldi	r30, 0x8F	; 143
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	31 97       	sbiw	r30, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Char+0x2a>
     164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Char+0x30>
     166:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
     168:	2b b3       	in	r18, 0x1b	; 27
     16a:	f0 e1       	ldi	r31, 0x10	; 16
     16c:	8f 9f       	mul	r24, r31
     16e:	c0 01       	movw	r24, r0
     170:	11 24       	eor	r1, r1
     172:	92 2f       	mov	r25, r18
     174:	9f 70       	andi	r25, 0x0F	; 15
     176:	89 2b       	or	r24, r25
     178:	8b bb       	out	0x1b, r24	; 27
	LCD_Port |= (1<<EN);
     17a:	8b b3       	in	r24, 0x1b	; 27
     17c:	84 60       	ori	r24, 0x04	; 4
     17e:	8b bb       	out	0x1b, r24	; 27
     180:	32 e0       	ldi	r19, 0x02	; 2
     182:	3a 95       	dec	r19
     184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Char+0x4c>
     186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Char+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     188:	8b b3       	in	r24, 0x1b	; 27
     18a:	8b 7f       	andi	r24, 0xFB	; 251
     18c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18e:	8f e9       	ldi	r24, 0x9F	; 159
     190:	9f e0       	ldi	r25, 0x0F	; 15
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Char+0x5c>
     196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Char+0x62>
     198:	00 00       	nop
     19a:	08 95       	ret

0000019c <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
     19c:	8f ef       	ldi	r24, 0xFF	; 255
     19e:	8a bb       	out	0x1a, r24	; 26
     1a0:	8f e3       	ldi	r24, 0x3F	; 63
     1a2:	9c e9       	ldi	r25, 0x9C	; 156
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x8>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0xe>
     1aa:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
     1b2:	88 e2       	ldi	r24, 0x28	; 40
     1b4:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
     1ca:	8f e9       	ldi	r24, 0x9F	; 159
     1cc:	9f e0       	ldi	r25, 0x0F	; 15
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_Init+0x32>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_Init+0x38>
     1d4:	00 00       	nop
     1d6:	08 95       	ret

000001d8 <LCD_String>:
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     1e2:	c0 e0       	ldi	r28, 0x00	; 0
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <LCD_String+0x16>
	{
		LCD_Char (str[i]);
     1e8:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     1ec:	21 96       	adiw	r28, 0x01	; 1
     1ee:	f8 01       	movw	r30, r16
     1f0:	ec 0f       	add	r30, r28
     1f2:	fd 1f       	adc	r31, r29
     1f4:	80 81       	ld	r24, Z
     1f6:	81 11       	cpse	r24, r1
     1f8:	f7 cf       	rjmp	.-18     	; 0x1e8 <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	08 95       	ret

00000204 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     20a:	81 11       	cpse	r24, r1
     20c:	08 c0       	rjmp	.+16     	; 0x21e <LCD_String_xy+0x1a>
     20e:	60 31       	cpi	r22, 0x10	; 16
     210:	30 f4       	brcc	.+12     	; 0x21e <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
     212:	86 2f       	mov	r24, r22
     214:	8f 70       	andi	r24, 0x0F	; 15
     216:	80 68       	ori	r24, 0x80	; 128
     218:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
     21c:	09 c0       	rjmp	.+18     	; 0x230 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	39 f4       	brne	.+14     	; 0x230 <LCD_String_xy+0x2c>
     222:	60 31       	cpi	r22, 0x10	; 16
     224:	28 f4       	brcc	.+10     	; 0x230 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
     226:	86 2f       	mov	r24, r22
     228:	8f 70       	andi	r24, 0x0F	; 15
     22a:	80 6c       	ori	r24, 0xC0	; 192
     22c:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
     230:	ce 01       	movw	r24, r28
     232:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_String>
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
     242:	8f e9       	ldi	r24, 0x9F	; 159
     244:	9f e0       	ldi	r25, 0x0F	; 15
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <LCD_Clear+0xa>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_Clear+0x10>
     24c:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
     24e:	80 e8       	ldi	r24, 0x80	; 128
     250:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Command>
     254:	08 95       	ret

00000256 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           	/* set port direction as input-output */
     256:	80 ef       	ldi	r24, 0xF0	; 240
     258:	81 bb       	out	0x11, r24	; 17
		KEY_PRT = 0xFF;
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	82 bb       	out	0x12, r24	; 18

		do
		{
			KEY_PRT &= 0x0F;      		/* mask PORT for column read only */
     25e:	82 b3       	in	r24, 0x12	; 18
     260:	8f 70       	andi	r24, 0x0F	; 15
     262:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
     264:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); 	/* read status of column */
     266:	80 b3       	in	r24, 0x10	; 16
     268:	8f 70       	andi	r24, 0x0F	; 15
     26a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
		}while(colloc != 0x0F);
     26e:	8f 30       	cpi	r24, 0x0F	; 15
     270:	b1 f7       	brne	.-20     	; 0x25e <keyfind+0x8>
     272:	8f e3       	ldi	r24, 0x3F	; 63
     274:	9c e9       	ldi	r25, 0x9C	; 156
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <keyfind+0x20>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <keyfind+0x26>
     27c:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
     27e:	80 b3       	in	r24, 0x10	; 16
     280:	8f 70       	andi	r24, 0x0F	; 15
     282:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
				}while(colloc == 0x0F);        /* check for any key press */
     286:	8f 30       	cpi	r24, 0x0F	; 15
     288:	a1 f3       	breq	.-24     	; 0x272 <keyfind+0x1c>
     28a:	9f ef       	ldi	r25, 0xFF	; 255
     28c:	29 ef       	ldi	r18, 0xF9	; 249
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	91 50       	subi	r25, 0x01	; 1
     292:	20 40       	sbci	r18, 0x00	; 0
     294:	80 40       	sbci	r24, 0x00	; 0
     296:	e1 f7       	brne	.-8      	; 0x290 <keyfind+0x3a>
     298:	00 c0       	rjmp	.+0      	; 0x29a <keyfind+0x44>
     29a:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
     29c:	80 b3       	in	r24, 0x10	; 16
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
			}while(colloc == 0x0F);
     2a4:	8f 30       	cpi	r24, 0x0F	; 15
     2a6:	29 f3       	breq	.-54     	; 0x272 <keyfind+0x1c>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
     2a8:	8f ee       	ldi	r24, 0xEF	; 239
     2aa:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
     2ac:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     2ae:	80 b3       	in	r24, 0x10	; 16
     2b0:	8f 70       	andi	r24, 0x0F	; 15
     2b2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
			if(colloc != 0x0F)
     2b6:	8f 30       	cpi	r24, 0x0F	; 15
     2b8:	19 f0       	breq	.+6      	; 0x2c0 <keyfind+0x6a>
			{
				rowloc = 0;
     2ba:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <rowloc>
				break;
     2be:	27 c0       	rjmp	.+78     	; 0x30e <keyfind+0xb8>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
     2c0:	8f ed       	ldi	r24, 0xDF	; 223
     2c2:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
     2c4:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     2c6:	80 b3       	in	r24, 0x10	; 16
     2c8:	8f 70       	andi	r24, 0x0F	; 15
     2ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
			if(colloc != 0x0F)
     2ce:	8f 30       	cpi	r24, 0x0F	; 15
     2d0:	21 f0       	breq	.+8      	; 0x2da <keyfind+0x84>
			{
				rowloc = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <rowloc>
				break;
     2d8:	1a c0       	rjmp	.+52     	; 0x30e <keyfind+0xb8>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
     2da:	8f eb       	ldi	r24, 0xBF	; 191
     2dc:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
     2de:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     2e0:	80 b3       	in	r24, 0x10	; 16
     2e2:	8f 70       	andi	r24, 0x0F	; 15
     2e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
			if(colloc != 0x0F)
     2e8:	8f 30       	cpi	r24, 0x0F	; 15
     2ea:	21 f0       	breq	.+8      	; 0x2f4 <keyfind+0x9e>
			{
				rowloc = 2;
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <rowloc>
				break;
     2f2:	0d c0       	rjmp	.+26     	; 0x30e <keyfind+0xb8>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
     2f4:	8f e7       	ldi	r24, 0x7F	; 127
     2f6:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
     2f8:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     2fa:	80 b3       	in	r24, 0x10	; 16
     2fc:	8f 70       	andi	r24, 0x0F	; 15
     2fe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
			if(colloc != 0x0F)
     302:	8f 30       	cpi	r24, 0x0F	; 15
     304:	09 f4       	brne	.+2      	; 0x308 <keyfind+0xb2>
     306:	a7 cf       	rjmp	.-178    	; 0x256 <keyfind>
			{
				rowloc = 3;
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <rowloc>
				break;
			}
		}
		if(colloc == 0x0E)
     30e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     312:	8e 30       	cpi	r24, 0x0E	; 14
     314:	59 f4       	brne	.+22     	; 0x32c <keyfind+0xd6>
		return(keypad[rowloc][0]);
     316:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <rowloc>
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	eb 59       	subi	r30, 0x9B	; 155
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	80 81       	ld	r24, Z
     32a:	08 95       	ret
		else if(colloc == 0x0D)
     32c:	8d 30       	cpi	r24, 0x0D	; 13
     32e:	59 f4       	brne	.+22     	; 0x346 <keyfind+0xf0>
		return(keypad[rowloc][1]);
     330:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <rowloc>
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	eb 59       	subi	r30, 0x9B	; 155
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	81 81       	ldd	r24, Z+1	; 0x01
     344:	08 95       	ret
		else if(colloc == 0x0B)
     346:	8b 30       	cpi	r24, 0x0B	; 11
     348:	59 f4       	brne	.+22     	; 0x360 <keyfind+0x10a>
		return(keypad[rowloc][2]);
     34a:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <rowloc>
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	eb 59       	subi	r30, 0x9B	; 155
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	08 95       	ret
		else
		return(keypad[rowloc][3]);
     360:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <rowloc>
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	eb 59       	subi	r30, 0x9B	; 155
     370:	ff 4f       	sbci	r31, 0xFF	; 255
     372:	83 81       	ldd	r24, Z+3	; 0x03
	}
     374:	08 95       	ret

00000376 <buzzer_alert>:
#ifndef BUZZER_H_
#define BUZZER_H_

void buzzer_alert(void)
{
	PORTC |= (1<<PC3); // set PC1 to 1 to turn on the buzzer
     376:	85 b3       	in	r24, 0x15	; 21
     378:	88 60       	ori	r24, 0x08	; 8
     37a:	85 bb       	out	0x15, r24	; 21
     37c:	2f ef       	ldi	r18, 0xFF	; 255
     37e:	81 ee       	ldi	r24, 0xE1	; 225
     380:	94 e0       	ldi	r25, 0x04	; 4
     382:	21 50       	subi	r18, 0x01	; 1
     384:	80 40       	sbci	r24, 0x00	; 0
     386:	90 40       	sbci	r25, 0x00	; 0
     388:	e1 f7       	brne	.-8      	; 0x382 <buzzer_alert+0xc>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <buzzer_alert+0x16>
     38c:	00 00       	nop
	_delay_ms(200); // delay for 200ms
	PORTC &= ~(1<<PC3); // set PC1 to 0 to turn off the buzzer
     38e:	85 b3       	in	r24, 0x15	; 21
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	85 bb       	out	0x15, r24	; 21
     394:	2f ef       	ldi	r18, 0xFF	; 255
     396:	81 ee       	ldi	r24, 0xE1	; 225
     398:	94 e0       	ldi	r25, 0x04	; 4
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	80 40       	sbci	r24, 0x00	; 0
     39e:	90 40       	sbci	r25, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <buzzer_alert+0x24>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <buzzer_alert+0x2e>
     3a4:	00 00       	nop
     3a6:	08 95       	ret

000003a8 <display_menu>:
int verify_password(char* entered_password);

// display menu
void display_menu(void)
{
	LCD_String_xy(0,0,"Enter pass +");
     3a8:	45 e7       	ldi	r20, 0x75	; 117
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
	LCD_String_xy(1,0,"Change pass -");/* send string data for printing */
     3b4:	42 e8       	ldi	r20, 0x82	; 130
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
     3c0:	08 95       	ret

000003c2 <verify_password>:
}

// Verify the password
int verify_password(char* entered_password)
{
	return (strcmp(entered_password, password) == 0);
     3c2:	60 e6       	ldi	r22, 0x60	; 96
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	0e 94 36 06 	call	0xc6c	; 0xc6c <strcmp>
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	89 2b       	or	r24, r25
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <verify_password+0x10>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
}
     3d2:	82 2f       	mov	r24, r18
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	08 95       	ret

000003d8 <enter_password_mode>:

// Mode for enter password
void enter_password_mode(void)
{
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	69 97       	sbiw	r28, 0x19	; 25
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
	char entered_password[PASSWORD_LENGTH+1];
	char key[20];
	int i;

	LCD_Clear();
     3f4:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
	LCD_String_xy(0,0,"Enter pass:");
     3f8:	40 e9       	ldi	r20, 0x90	; 144
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
	for(i = 0; i < PASSWORD_LENGTH; i++)
     404:	00 e0       	ldi	r16, 0x00	; 0
     406:	10 e0       	ldi	r17, 0x00	; 0
     408:	33 c0       	rjmp	.+102    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		entered_password[i] = keyfind();
     40a:	0e 94 2b 01 	call	0x256	; 0x256 <keyfind>
     40e:	e1 e0       	ldi	r30, 0x01	; 1
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ec 0f       	add	r30, r28
     414:	fd 1f       	adc	r31, r29
     416:	e0 0f       	add	r30, r16
     418:	f1 1f       	adc	r31, r17
     41a:	80 83       	st	Z, r24
		sprintf(key,"%c",entered_password[i]);
     41c:	1f 92       	push	r1
     41e:	8f 93       	push	r24
     420:	8c e9       	ldi	r24, 0x9C	; 156
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	9f 93       	push	r25
     426:	8f 93       	push	r24
     428:	7e 01       	movw	r14, r28
     42a:	26 e0       	ldi	r18, 0x06	; 6
     42c:	e2 0e       	add	r14, r18
     42e:	f1 1c       	adc	r15, r1
     430:	ff 92       	push	r15
     432:	ef 92       	push	r14
     434:	0e 94 3f 06 	call	0xc7e	; 0xc7e <sprintf>
		LCD_String_xy(1,i,key);
     438:	a7 01       	movw	r20, r14
     43a:	60 2f       	mov	r22, r16
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	91 ee       	ldi	r25, 0xE1	; 225
     446:	24 e0       	ldi	r18, 0x04	; 4
     448:	81 50       	subi	r24, 0x01	; 1
     44a:	90 40       	sbci	r25, 0x00	; 0
     44c:	20 40       	sbci	r18, 0x00	; 0
     44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     452:	00 00       	nop
		_delay_ms(200);
		LCD_String_xy(1, i, "*");
     454:	4f e9       	ldi	r20, 0x9F	; 159
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	60 2f       	mov	r22, r16
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
	char key[20];
	int i;

	LCD_Clear();
	LCD_String_xy(0,0,"Enter pass:");
	for(i = 0; i < PASSWORD_LENGTH; i++)
     460:	0f 5f       	subi	r16, 0xFF	; 255
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	04 30       	cpi	r16, 0x04	; 4
     472:	11 05       	cpc	r17, r1
     474:	54 f2       	brlt	.-108    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		sprintf(key,"%c",entered_password[i]);
		LCD_String_xy(1,i,key);
		_delay_ms(200);
		LCD_String_xy(1, i, "*");
	}
	entered_password[PASSWORD_LENGTH] = '\0';
     476:	1d 82       	std	Y+5, r1	; 0x05

	if(verify_password(entered_password)) // if password is true
     478:	ce 01       	movw	r24, r28
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <verify_password>
     480:	89 2b       	or	r24, r25
     482:	e1 f0       	breq	.+56     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
	{
		LCD_Clear();
     484:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		LCD_String_xy(0,0,"Door Opened");
     488:	41 ea       	ldi	r20, 0xA1	; 161
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
		// Control motor to open the door
		PORTC |= (1<<PC1);
     494:	85 b3       	in	r24, 0x15	; 21
     496:	82 60       	ori	r24, 0x02	; 2
     498:	85 bb       	out	0x15, r24	; 21
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	94 e3       	ldi	r25, 0x34	; 52
     49e:	2c e0       	ldi	r18, 0x0C	; 12
     4a0:	81 50       	subi	r24, 0x01	; 1
     4a2:	90 40       	sbci	r25, 0x00	; 0
     4a4:	20 40       	sbci	r18, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4aa:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
     4ac:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		display_menu();
     4b0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_menu>
		// close the door
		PORTC &= ~(1<<PC1);
     4b4:	85 b3       	in	r24, 0x15	; 21
     4b6:	8d 7f       	andi	r24, 0xFD	; 253
     4b8:	85 bb       	out	0x15, r24	; 21
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
	}
	else //if password is wrong
	{
		LCD_Clear();
     4bc:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		LCD_String_xy(0,0,"Incorrect pass");
     4c0:	4d ea       	ldi	r20, 0xAD	; 173
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
		buzzer_alert(); // activate buzzer alert
     4cc:	0e 94 bb 01 	call	0x376	; 0x376 <buzzer_alert>
		LCD_Clear();
     4d0:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		display_menu();
     4d4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_menu>
	}
}
     4d8:	69 96       	adiw	r28, 0x19	; 25
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	08 95       	ret

000004f2 <change_password_mode>:

// Mode for change password
void change_password_mode(void)
{
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	69 97       	sbiw	r28, 0x19	; 25
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
	char entered_password[PASSWORD_LENGTH+1];
	char key[20];
	int i;
	LCD_Clear();
     50e:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
	LCD_String_xy(0,0,"Old pass:");
     512:	4c eb       	ldi	r20, 0xBC	; 188
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
	for(i = 0; i < PASSWORD_LENGTH; i++)
     51e:	00 e0       	ldi	r16, 0x00	; 0
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	33 c0       	rjmp	.+102    	; 0x58a <change_password_mode+0x98>
	{
		entered_password[i] = keyfind();
     524:	0e 94 2b 01 	call	0x256	; 0x256 <keyfind>
     528:	e1 e0       	ldi	r30, 0x01	; 1
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	ec 0f       	add	r30, r28
     52e:	fd 1f       	adc	r31, r29
     530:	e0 0f       	add	r30, r16
     532:	f1 1f       	adc	r31, r17
     534:	80 83       	st	Z, r24
		sprintf(key,"%c",entered_password[i]);
     536:	1f 92       	push	r1
     538:	8f 93       	push	r24
     53a:	8c e9       	ldi	r24, 0x9C	; 156
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	7e 01       	movw	r14, r28
     544:	26 e0       	ldi	r18, 0x06	; 6
     546:	e2 0e       	add	r14, r18
     548:	f1 1c       	adc	r15, r1
     54a:	ff 92       	push	r15
     54c:	ef 92       	push	r14
     54e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <sprintf>
		LCD_String_xy(1,i,key);
     552:	a7 01       	movw	r20, r14
     554:	60 2f       	mov	r22, r16
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	91 ee       	ldi	r25, 0xE1	; 225
     560:	24 e0       	ldi	r18, 0x04	; 4
     562:	81 50       	subi	r24, 0x01	; 1
     564:	90 40       	sbci	r25, 0x00	; 0
     566:	20 40       	sbci	r18, 0x00	; 0
     568:	e1 f7       	brne	.-8      	; 0x562 <change_password_mode+0x70>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <change_password_mode+0x7a>
     56c:	00 00       	nop
		_delay_ms(200);
		LCD_String_xy(1, i, "*");
     56e:	4f e9       	ldi	r20, 0x9F	; 159
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	60 2f       	mov	r22, r16
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
	char entered_password[PASSWORD_LENGTH+1];
	char key[20];
	int i;
	LCD_Clear();
	LCD_String_xy(0,0,"Old pass:");
	for(i = 0; i < PASSWORD_LENGTH; i++)
     57a:	0f 5f       	subi	r16, 0xFF	; 255
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	04 30       	cpi	r16, 0x04	; 4
     58c:	11 05       	cpc	r17, r1
     58e:	54 f2       	brlt	.-108    	; 0x524 <change_password_mode+0x32>
		sprintf(key,"%c",entered_password[i]);
		LCD_String_xy(1,i,key);
		_delay_ms(200);
		LCD_String_xy(1, i, "*");
	}
	entered_password[PASSWORD_LENGTH] = '\0';
     590:	1d 82       	std	Y+5, r1	; 0x05

	if(verify_password(entered_password)) // if password is true
     592:	ce 01       	movw	r24, r28
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <verify_password>
     59a:	89 2b       	or	r24, r25
     59c:	09 f4       	brne	.+2      	; 0x5a0 <change_password_mode+0xae>
     59e:	56 c0       	rjmp	.+172    	; 0x64c <change_password_mode+0x15a>
	{
		LCD_Clear();
     5a0:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		LCD_String_xy(0,0,"New pass:");
     5a4:	46 ec       	ldi	r20, 0xC6	; 198
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
		for(i = 0; i < PASSWORD_LENGTH; i++)
     5b0:	00 e0       	ldi	r16, 0x00	; 0
     5b2:	10 e0       	ldi	r17, 0x00	; 0
     5b4:	30 c0       	rjmp	.+96     	; 0x616 <change_password_mode+0x124>
		{
			password[i] = keyfind();
     5b6:	0e 94 2b 01 	call	0x256	; 0x256 <keyfind>
     5ba:	f8 01       	movw	r30, r16
     5bc:	e0 5a       	subi	r30, 0xA0	; 160
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 83       	st	Z, r24
			sprintf(key,"%c",password[i]);
     5c2:	1f 92       	push	r1
     5c4:	8f 93       	push	r24
     5c6:	8c e9       	ldi	r24, 0x9C	; 156
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	7e 01       	movw	r14, r28
     5d0:	86 e0       	ldi	r24, 0x06	; 6
     5d2:	e8 0e       	add	r14, r24
     5d4:	f1 1c       	adc	r15, r1
     5d6:	ff 92       	push	r15
     5d8:	ef 92       	push	r14
     5da:	0e 94 3f 06 	call	0xc7e	; 0xc7e <sprintf>
			LCD_String_xy(1,i,key);
     5de:	a7 01       	movw	r20, r14
     5e0:	60 2f       	mov	r22, r16
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
     5e8:	9f ef       	ldi	r25, 0xFF	; 255
     5ea:	21 ee       	ldi	r18, 0xE1	; 225
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	91 50       	subi	r25, 0x01	; 1
     5f0:	20 40       	sbci	r18, 0x00	; 0
     5f2:	80 40       	sbci	r24, 0x00	; 0
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <change_password_mode+0xfc>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <change_password_mode+0x106>
     5f8:	00 00       	nop
			_delay_ms(200);
			LCD_String_xy(1, i, "*");
     5fa:	4f e9       	ldi	r20, 0x9F	; 159
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 2f       	mov	r22, r16
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>

	if(verify_password(entered_password)) // if password is true
	{
		LCD_Clear();
		LCD_String_xy(0,0,"New pass:");
		for(i = 0; i < PASSWORD_LENGTH; i++)
     606:	0f 5f       	subi	r16, 0xFF	; 255
     608:	1f 4f       	sbci	r17, 0xFF	; 255
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	04 30       	cpi	r16, 0x04	; 4
     618:	11 05       	cpc	r17, r1
     61a:	6c f2       	brlt	.-102    	; 0x5b6 <change_password_mode+0xc4>
			sprintf(key,"%c",password[i]);
			LCD_String_xy(1,i,key);
			_delay_ms(200);
			LCD_String_xy(1, i, "*");
		}
		password[PASSWORD_LENGTH] = '\0';
     61c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_start+0x4>
		LCD_Clear();
     620:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		LCD_String_xy(0,0,"Password changed");
     624:	40 ed       	ldi	r20, 0xD0	; 208
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
     630:	9f ef       	ldi	r25, 0xFF	; 255
     632:	24 e3       	ldi	r18, 0x34	; 52
     634:	8c e0       	ldi	r24, 0x0C	; 12
     636:	91 50       	subi	r25, 0x01	; 1
     638:	20 40       	sbci	r18, 0x00	; 0
     63a:	80 40       	sbci	r24, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <change_password_mode+0x144>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <change_password_mode+0x14e>
     640:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
     642:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		display_menu();
     646:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_menu>
     64a:	0e c0       	rjmp	.+28     	; 0x668 <change_password_mode+0x176>
	}
	else // if password is wrong
	{
		LCD_Clear();
     64c:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		LCD_String_xy(0,0,"Incorrect pass");
     650:	4d ea       	ldi	r20, 0xAD	; 173
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
		buzzer_alert();
     65c:	0e 94 bb 01 	call	0x376	; 0x376 <buzzer_alert>
		LCD_Clear();
     660:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
		display_menu();
     664:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_menu>
	}
}
     668:	69 96       	adiw	r28, 0x19	; 25
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	08 95       	ret

00000682 <select_mode>:

// Select options
void select_mode (void)
{
	char key = keyfind();
     682:	0e 94 2b 01 	call	0x256	; 0x256 <keyfind>
	if(key == '+')
     686:	8b 32       	cpi	r24, 0x2B	; 43
     688:	19 f4       	brne	.+6      	; 0x690 <select_mode+0xe>
	{
		enter_password_mode();
     68a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <enter_password_mode>
     68e:	08 95       	ret
	}
	else if(key == '-')
     690:	8d 32       	cpi	r24, 0x2D	; 45
     692:	11 f4       	brne	.+4      	; 0x698 <select_mode+0x16>
	{
		change_password_mode();
     694:	0e 94 79 02 	call	0x4f2	; 0x4f2 <change_password_mode>
     698:	08 95       	ret

0000069a <read_temp>:
}

// Auto fan based on temperature
void read_temp(void)
{
	int lm35_value = readADC(0);
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 53 00 	call	0xa6	; 0xa6 <readADC>
	int temp = (lm35_value / 1023.0) * 500.0;
     6a2:	bc 01       	movw	r22, r24
     6a4:	99 0f       	add	r25, r25
     6a6:	88 0b       	sbc	r24, r24
     6a8:	99 0b       	sbc	r25, r25
     6aa:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 ec       	ldi	r19, 0xC0	; 192
     6b2:	4f e7       	ldi	r20, 0x7F	; 127
     6b4:	54 e4       	ldi	r21, 0x44	; 68
     6b6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	4a ef       	ldi	r20, 0xFA	; 250
     6c0:	53 e4       	ldi	r21, 0x43	; 67
     6c2:	0e 94 c9 05 	call	0xb92	; 0xb92 <__mulsf3>
     6c6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixsfsi>
	if (temp > 30)
     6ca:	6f 31       	cpi	r22, 0x1F	; 31
     6cc:	71 05       	cpc	r23, r1
     6ce:	24 f0       	brlt	.+8      	; 0x6d8 <read_temp+0x3e>
	{
		PORTC |= (1<<PC2);
     6d0:	85 b3       	in	r24, 0x15	; 21
     6d2:	84 60       	ori	r24, 0x04	; 4
     6d4:	85 bb       	out	0x15, r24	; 21
     6d6:	08 95       	ret
	}
	else
	{
		PORTC &= ~(1<<PC2);
     6d8:	85 b3       	in	r24, 0x15	; 21
     6da:	8b 7f       	andi	r24, 0xFB	; 251
     6dc:	85 bb       	out	0x15, r24	; 21
     6de:	08 95       	ret

000006e0 <read_ldr>:
	//LCD_String_xy(0,6, temp_str);
}

// Auto light based on LDR resistance
void read_ldr(void)
{
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
	int ldr_value = readADC(1);
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 53 00 	call	0xa6	; 0xa6 <readADC>
	float ldr_resistance = 0;
	ldr_resistance = 10000.0 / ((1023.0 / ldr_value) - 1.0);
     6f0:	bc 01       	movw	r22, r24
     6f2:	99 0f       	add	r25, r25
     6f4:	88 0b       	sbc	r24, r24
     6f6:	99 0b       	sbc	r25, r25
     6f8:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 ec       	ldi	r23, 0xC0	; 192
     704:	8f e7       	ldi	r24, 0x7F	; 127
     706:	94 e4       	ldi	r25, 0x44	; 68
     708:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e8       	ldi	r20, 0x80	; 128
     712:	5f e3       	ldi	r21, 0x3F	; 63
     714:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__subsf3>
     718:	9b 01       	movw	r18, r22
     71a:	ac 01       	movw	r20, r24
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e4       	ldi	r23, 0x40	; 64
     720:	8c e1       	ldi	r24, 0x1C	; 28
     722:	96 e4       	ldi	r25, 0x46	; 70
     724:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
     728:	6b 01       	movw	r12, r22
     72a:	7c 01       	movw	r14, r24
	if(ldr_resistance < 2500)
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e4       	ldi	r19, 0x40	; 64
     730:	4c e1       	ldi	r20, 0x1C	; 28
     732:	55 e4       	ldi	r21, 0x45	; 69
     734:	0e 94 65 04 	call	0x8ca	; 0x8ca <__cmpsf2>
     738:	88 23       	and	r24, r24
     73a:	24 f4       	brge	.+8      	; 0x744 <read_ldr+0x64>
	{
		PORTC |= (1<<PC0);
     73c:	85 b3       	in	r24, 0x15	; 21
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	85 bb       	out	0x15, r24	; 21
     742:	0d c0       	rjmp	.+26     	; 0x75e <read_ldr+0x7e>
	}
	else if(ldr_resistance > 2500)
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e4       	ldi	r19, 0x40	; 64
     748:	4c e1       	ldi	r20, 0x1C	; 28
     74a:	55 e4       	ldi	r21, 0x45	; 69
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	0e 94 c4 05 	call	0xb88	; 0xb88 <__gesf2>
     754:	18 16       	cp	r1, r24
     756:	1c f4       	brge	.+6      	; 0x75e <read_ldr+0x7e>
	{
		PORTC &= ~(1<<PC0);
     758:	85 b3       	in	r24, 0x15	; 21
     75a:	8e 7f       	andi	r24, 0xFE	; 254
     75c:	85 bb       	out	0x15, r24	; 21
	// TEST IN LCD
	//char ldr_str[16];
	//dtostrf(ldr_resistance, 6, 2, ldr_str);
	//LCD_String_xy(1,0,"LDR Res: ");
	//LCD_String_xy(1,8,ldr_str);
	}
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	08 95       	ret

00000768 <__vector_7>:
	
// Timer 1 running tasks
ISR(TIMER1_COMPA_vect) {
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
	read_temp();
     78a:	0e 94 4d 03 	call	0x69a	; 0x69a <read_temp>
	read_ldr();
     78e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <read_ldr>
}
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	bf 91       	pop	r27
     798:	af 91       	pop	r26
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	7f 91       	pop	r23
     7a0:	6f 91       	pop	r22
     7a2:	5f 91       	pop	r21
     7a4:	4f 91       	pop	r20
     7a6:	3f 91       	pop	r19
     7a8:	2f 91       	pop	r18
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	1f 90       	pop	r1
     7b2:	18 95       	reti

000007b4 <main>:

int main()
{
	DDRC = 0xFF;
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	84 bb       	out	0x14, r24	; 20
	LCD_Init();
     7b8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Init>
	LCD_Clear();
     7bc:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Clear>
	initADC();
     7c0:	0e 94 49 00 	call	0x92	; 0x92 <initADC>
	DDRA &= ~((1 << PA0) | (1 << PA1));
     7c4:	8a b3       	in	r24, 0x1a	; 26
     7c6:	8c 7f       	andi	r24, 0xFC	; 252
     7c8:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0) | (1 << PA1);
     7ca:	8b b3       	in	r24, 0x1b	; 27
     7cc:	83 60       	ori	r24, 0x03	; 3
     7ce:	8b bb       	out	0x1b, r24	; 27
	// Setup timer 1
	TCCR1B |= (1<<CS12)|(1<<CS10); // Split frequency 1024
     7d0:	8e b5       	in	r24, 0x2e	; 46
     7d2:	85 60       	ori	r24, 0x05	; 5
     7d4:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); // Enable interrupt when the value is reached
     7d6:	89 b7       	in	r24, 0x39	; 57
     7d8:	80 61       	ori	r24, 0x10	; 16
     7da:	89 bf       	out	0x39, r24	; 57
	OCR1A = 15625; // Set the counter value to interrupt after 5 seconds
     7dc:	89 e0       	ldi	r24, 0x09	; 9
     7de:	9d e3       	ldi	r25, 0x3D	; 61
     7e0:	9b bd       	out	0x2b, r25	; 43
     7e2:	8a bd       	out	0x2a, r24	; 42
	sei(); // Enable global interrupt
     7e4:	78 94       	sei
	display_menu();
     7e6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_menu>
	while (1)
	{
		select_mode();
     7ea:	0e 94 41 03 	call	0x682	; 0x682 <select_mode>
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <main+0x36>

000007f0 <__subsf3>:
     7f0:	50 58       	subi	r21, 0x80	; 128

000007f2 <__addsf3>:
     7f2:	bb 27       	eor	r27, r27
     7f4:	aa 27       	eor	r26, r26
     7f6:	0e 94 10 04 	call	0x820	; 0x820 <__addsf3x>
     7fa:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
     7fe:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
     802:	38 f0       	brcs	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     804:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
     808:	20 f0       	brcs	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80a:	39 f4       	brne	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     80c:	9f 3f       	cpi	r25, 0xFF	; 255
     80e:	19 f4       	brne	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     810:	26 f4       	brtc	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     812:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
     816:	0e f4       	brtc	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     818:	e0 95       	com	r30
     81a:	e7 fb       	bst	r30, 7
     81c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>

00000820 <__addsf3x>:
     820:	e9 2f       	mov	r30, r25
     822:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
     826:	58 f3       	brcs	.-42     	; 0x7fe <__addsf3+0xc>
     828:	ba 17       	cp	r27, r26
     82a:	62 07       	cpc	r22, r18
     82c:	73 07       	cpc	r23, r19
     82e:	84 07       	cpc	r24, r20
     830:	95 07       	cpc	r25, r21
     832:	20 f0       	brcs	.+8      	; 0x83c <__addsf3x+0x1c>
     834:	79 f4       	brne	.+30     	; 0x854 <__addsf3x+0x34>
     836:	a6 f5       	brtc	.+104    	; 0x8a0 <__stack+0x41>
     838:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
     83c:	0e f4       	brtc	.+2      	; 0x840 <__addsf3x+0x20>
     83e:	e0 95       	com	r30
     840:	0b 2e       	mov	r0, r27
     842:	ba 2f       	mov	r27, r26
     844:	a0 2d       	mov	r26, r0
     846:	0b 01       	movw	r0, r22
     848:	b9 01       	movw	r22, r18
     84a:	90 01       	movw	r18, r0
     84c:	0c 01       	movw	r0, r24
     84e:	ca 01       	movw	r24, r20
     850:	a0 01       	movw	r20, r0
     852:	11 24       	eor	r1, r1
     854:	ff 27       	eor	r31, r31
     856:	59 1b       	sub	r21, r25
     858:	99 f0       	breq	.+38     	; 0x880 <__stack+0x21>
     85a:	59 3f       	cpi	r21, 0xF9	; 249
     85c:	50 f4       	brcc	.+20     	; 0x872 <__stack+0x13>
     85e:	50 3e       	cpi	r21, 0xE0	; 224
     860:	68 f1       	brcs	.+90     	; 0x8bc <__stack+0x5d>
     862:	1a 16       	cp	r1, r26
     864:	f0 40       	sbci	r31, 0x00	; 0
     866:	a2 2f       	mov	r26, r18
     868:	23 2f       	mov	r18, r19
     86a:	34 2f       	mov	r19, r20
     86c:	44 27       	eor	r20, r20
     86e:	58 5f       	subi	r21, 0xF8	; 248
     870:	f3 cf       	rjmp	.-26     	; 0x858 <__addsf3x+0x38>
     872:	46 95       	lsr	r20
     874:	37 95       	ror	r19
     876:	27 95       	ror	r18
     878:	a7 95       	ror	r26
     87a:	f0 40       	sbci	r31, 0x00	; 0
     87c:	53 95       	inc	r21
     87e:	c9 f7       	brne	.-14     	; 0x872 <__stack+0x13>
     880:	7e f4       	brtc	.+30     	; 0x8a0 <__stack+0x41>
     882:	1f 16       	cp	r1, r31
     884:	ba 0b       	sbc	r27, r26
     886:	62 0b       	sbc	r22, r18
     888:	73 0b       	sbc	r23, r19
     88a:	84 0b       	sbc	r24, r20
     88c:	ba f0       	brmi	.+46     	; 0x8bc <__stack+0x5d>
     88e:	91 50       	subi	r25, 0x01	; 1
     890:	a1 f0       	breq	.+40     	; 0x8ba <__stack+0x5b>
     892:	ff 0f       	add	r31, r31
     894:	bb 1f       	adc	r27, r27
     896:	66 1f       	adc	r22, r22
     898:	77 1f       	adc	r23, r23
     89a:	88 1f       	adc	r24, r24
     89c:	c2 f7       	brpl	.-16     	; 0x88e <__stack+0x2f>
     89e:	0e c0       	rjmp	.+28     	; 0x8bc <__stack+0x5d>
     8a0:	ba 0f       	add	r27, r26
     8a2:	62 1f       	adc	r22, r18
     8a4:	73 1f       	adc	r23, r19
     8a6:	84 1f       	adc	r24, r20
     8a8:	48 f4       	brcc	.+18     	; 0x8bc <__stack+0x5d>
     8aa:	87 95       	ror	r24
     8ac:	77 95       	ror	r23
     8ae:	67 95       	ror	r22
     8b0:	b7 95       	ror	r27
     8b2:	f7 95       	ror	r31
     8b4:	9e 3f       	cpi	r25, 0xFE	; 254
     8b6:	08 f0       	brcs	.+2      	; 0x8ba <__stack+0x5b>
     8b8:	b0 cf       	rjmp	.-160    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     8ba:	93 95       	inc	r25
     8bc:	88 0f       	add	r24, r24
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <__stack+0x63>
     8c0:	99 27       	eor	r25, r25
     8c2:	ee 0f       	add	r30, r30
     8c4:	97 95       	ror	r25
     8c6:	87 95       	ror	r24
     8c8:	08 95       	ret

000008ca <__cmpsf2>:
     8ca:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_cmp>
     8ce:	08 f4       	brcc	.+2      	; 0x8d2 <__cmpsf2+0x8>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	08 95       	ret

000008d4 <__divsf3>:
     8d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3x>
     8d8:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
     8dc:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
     8e0:	58 f0       	brcs	.+22     	; 0x8f8 <__divsf3+0x24>
     8e2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
     8e6:	40 f0       	brcs	.+16     	; 0x8f8 <__divsf3+0x24>
     8e8:	29 f4       	brne	.+10     	; 0x8f4 <__divsf3+0x20>
     8ea:	5f 3f       	cpi	r21, 0xFF	; 255
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <__divsf3+0x24>
     8ee:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
     8f2:	51 11       	cpse	r21, r1
     8f4:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
     8f8:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>

000008fc <__divsf3x>:
     8fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
     900:	68 f3       	brcs	.-38     	; 0x8dc <__divsf3+0x8>

00000902 <__divsf3_pse>:
     902:	99 23       	and	r25, r25
     904:	b1 f3       	breq	.-20     	; 0x8f2 <__divsf3+0x1e>
     906:	55 23       	and	r21, r21
     908:	91 f3       	breq	.-28     	; 0x8ee <__divsf3+0x1a>
     90a:	95 1b       	sub	r25, r21
     90c:	55 0b       	sbc	r21, r21
     90e:	bb 27       	eor	r27, r27
     910:	aa 27       	eor	r26, r26
     912:	62 17       	cp	r22, r18
     914:	73 07       	cpc	r23, r19
     916:	84 07       	cpc	r24, r20
     918:	38 f0       	brcs	.+14     	; 0x928 <__divsf3_pse+0x26>
     91a:	9f 5f       	subi	r25, 0xFF	; 255
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	22 0f       	add	r18, r18
     920:	33 1f       	adc	r19, r19
     922:	44 1f       	adc	r20, r20
     924:	aa 1f       	adc	r26, r26
     926:	a9 f3       	breq	.-22     	; 0x912 <__divsf3_pse+0x10>
     928:	35 d0       	rcall	.+106    	; 0x994 <__divsf3_pse+0x92>
     92a:	0e 2e       	mov	r0, r30
     92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x3a>
     92e:	e0 e8       	ldi	r30, 0x80	; 128
     930:	32 d0       	rcall	.+100    	; 0x996 <__divsf3_pse+0x94>
     932:	91 50       	subi	r25, 0x01	; 1
     934:	50 40       	sbci	r21, 0x00	; 0
     936:	e6 95       	lsr	r30
     938:	00 1c       	adc	r0, r0
     93a:	ca f7       	brpl	.-14     	; 0x92e <__divsf3_pse+0x2c>
     93c:	2b d0       	rcall	.+86     	; 0x994 <__divsf3_pse+0x92>
     93e:	fe 2f       	mov	r31, r30
     940:	29 d0       	rcall	.+82     	; 0x994 <__divsf3_pse+0x92>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	88 1f       	adc	r24, r24
     948:	bb 1f       	adc	r27, r27
     94a:	26 17       	cp	r18, r22
     94c:	37 07       	cpc	r19, r23
     94e:	48 07       	cpc	r20, r24
     950:	ab 07       	cpc	r26, r27
     952:	b0 e8       	ldi	r27, 0x80	; 128
     954:	09 f0       	breq	.+2      	; 0x958 <__divsf3_pse+0x56>
     956:	bb 0b       	sbc	r27, r27
     958:	80 2d       	mov	r24, r0
     95a:	bf 01       	movw	r22, r30
     95c:	ff 27       	eor	r31, r31
     95e:	93 58       	subi	r25, 0x83	; 131
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	3a f0       	brmi	.+14     	; 0x972 <__divsf3_pse+0x70>
     964:	9e 3f       	cpi	r25, 0xFE	; 254
     966:	51 05       	cpc	r21, r1
     968:	78 f0       	brcs	.+30     	; 0x988 <__divsf3_pse+0x86>
     96a:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
     96e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
     972:	5f 3f       	cpi	r21, 0xFF	; 255
     974:	e4 f3       	brlt	.-8      	; 0x96e <__divsf3_pse+0x6c>
     976:	98 3e       	cpi	r25, 0xE8	; 232
     978:	d4 f3       	brlt	.-12     	; 0x96e <__divsf3_pse+0x6c>
     97a:	86 95       	lsr	r24
     97c:	77 95       	ror	r23
     97e:	67 95       	ror	r22
     980:	b7 95       	ror	r27
     982:	f7 95       	ror	r31
     984:	9f 5f       	subi	r25, 0xFF	; 255
     986:	c9 f7       	brne	.-14     	; 0x97a <__divsf3_pse+0x78>
     988:	88 0f       	add	r24, r24
     98a:	91 1d       	adc	r25, r1
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	97 f9       	bld	r25, 7
     992:	08 95       	ret
     994:	e1 e0       	ldi	r30, 0x01	; 1
     996:	66 0f       	add	r22, r22
     998:	77 1f       	adc	r23, r23
     99a:	88 1f       	adc	r24, r24
     99c:	bb 1f       	adc	r27, r27
     99e:	62 17       	cp	r22, r18
     9a0:	73 07       	cpc	r23, r19
     9a2:	84 07       	cpc	r24, r20
     9a4:	ba 07       	cpc	r27, r26
     9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__divsf3_pse+0xae>
     9a8:	62 1b       	sub	r22, r18
     9aa:	73 0b       	sbc	r23, r19
     9ac:	84 0b       	sbc	r24, r20
     9ae:	ba 0b       	sbc	r27, r26
     9b0:	ee 1f       	adc	r30, r30
     9b2:	88 f7       	brcc	.-30     	; 0x996 <__divsf3_pse+0x94>
     9b4:	e0 95       	com	r30
     9b6:	08 95       	ret

000009b8 <__fixsfsi>:
     9b8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixunssfsi>
     9bc:	68 94       	set
     9be:	b1 11       	cpse	r27, r1
     9c0:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
     9c4:	08 95       	ret

000009c6 <__fixunssfsi>:
     9c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_splitA>
     9ca:	88 f0       	brcs	.+34     	; 0x9ee <__fixunssfsi+0x28>
     9cc:	9f 57       	subi	r25, 0x7F	; 127
     9ce:	98 f0       	brcs	.+38     	; 0x9f6 <__fixunssfsi+0x30>
     9d0:	b9 2f       	mov	r27, r25
     9d2:	99 27       	eor	r25, r25
     9d4:	b7 51       	subi	r27, 0x17	; 23
     9d6:	b0 f0       	brcs	.+44     	; 0xa04 <__fixunssfsi+0x3e>
     9d8:	e1 f0       	breq	.+56     	; 0xa12 <__fixunssfsi+0x4c>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	1a f0       	brmi	.+6      	; 0x9ea <__fixunssfsi+0x24>
     9e4:	ba 95       	dec	r27
     9e6:	c9 f7       	brne	.-14     	; 0x9da <__fixunssfsi+0x14>
     9e8:	14 c0       	rjmp	.+40     	; 0xa12 <__fixunssfsi+0x4c>
     9ea:	b1 30       	cpi	r27, 0x01	; 1
     9ec:	91 f0       	breq	.+36     	; 0xa12 <__fixunssfsi+0x4c>
     9ee:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_zero>
     9f2:	b1 e0       	ldi	r27, 0x01	; 1
     9f4:	08 95       	ret
     9f6:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
     9fa:	67 2f       	mov	r22, r23
     9fc:	78 2f       	mov	r23, r24
     9fe:	88 27       	eor	r24, r24
     a00:	b8 5f       	subi	r27, 0xF8	; 248
     a02:	39 f0       	breq	.+14     	; 0xa12 <__fixunssfsi+0x4c>
     a04:	b9 3f       	cpi	r27, 0xF9	; 249
     a06:	cc f3       	brlt	.-14     	; 0x9fa <__fixunssfsi+0x34>
     a08:	86 95       	lsr	r24
     a0a:	77 95       	ror	r23
     a0c:	67 95       	ror	r22
     a0e:	b3 95       	inc	r27
     a10:	d9 f7       	brne	.-10     	; 0xa08 <__fixunssfsi+0x42>
     a12:	3e f4       	brtc	.+14     	; 0xa22 <__fixunssfsi+0x5c>
     a14:	90 95       	com	r25
     a16:	80 95       	com	r24
     a18:	70 95       	com	r23
     a1a:	61 95       	neg	r22
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	8f 4f       	sbci	r24, 0xFF	; 255
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	08 95       	ret

00000a24 <__floatunsisf>:
     a24:	e8 94       	clt
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__floatsisf+0x12>

00000a28 <__floatsisf>:
     a28:	97 fb       	bst	r25, 7
     a2a:	3e f4       	brtc	.+14     	; 0xa3a <__floatsisf+0x12>
     a2c:	90 95       	com	r25
     a2e:	80 95       	com	r24
     a30:	70 95       	com	r23
     a32:	61 95       	neg	r22
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	8f 4f       	sbci	r24, 0xFF	; 255
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	99 23       	and	r25, r25
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x40>
     a3e:	f9 2f       	mov	r31, r25
     a40:	96 e9       	ldi	r25, 0x96	; 150
     a42:	bb 27       	eor	r27, r27
     a44:	93 95       	inc	r25
     a46:	f6 95       	lsr	r31
     a48:	87 95       	ror	r24
     a4a:	77 95       	ror	r23
     a4c:	67 95       	ror	r22
     a4e:	b7 95       	ror	r27
     a50:	f1 11       	cpse	r31, r1
     a52:	f8 cf       	rjmp	.-16     	; 0xa44 <__floatsisf+0x1c>
     a54:	fa f4       	brpl	.+62     	; 0xa94 <__floatsisf+0x6c>
     a56:	bb 0f       	add	r27, r27
     a58:	11 f4       	brne	.+4      	; 0xa5e <__floatsisf+0x36>
     a5a:	60 ff       	sbrs	r22, 0
     a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__floatsisf+0x6c>
     a5e:	6f 5f       	subi	r22, 0xFF	; 255
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	8f 4f       	sbci	r24, 0xFF	; 255
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	16 c0       	rjmp	.+44     	; 0xa94 <__floatsisf+0x6c>
     a68:	88 23       	and	r24, r24
     a6a:	11 f0       	breq	.+4      	; 0xa70 <__floatsisf+0x48>
     a6c:	96 e9       	ldi	r25, 0x96	; 150
     a6e:	11 c0       	rjmp	.+34     	; 0xa92 <__floatsisf+0x6a>
     a70:	77 23       	and	r23, r23
     a72:	21 f0       	breq	.+8      	; 0xa7c <__floatsisf+0x54>
     a74:	9e e8       	ldi	r25, 0x8E	; 142
     a76:	87 2f       	mov	r24, r23
     a78:	76 2f       	mov	r23, r22
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <__floatsisf+0x5e>
     a7c:	66 23       	and	r22, r22
     a7e:	71 f0       	breq	.+28     	; 0xa9c <__floatsisf+0x74>
     a80:	96 e8       	ldi	r25, 0x86	; 134
     a82:	86 2f       	mov	r24, r22
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	2a f0       	brmi	.+10     	; 0xa94 <__floatsisf+0x6c>
     a8a:	9a 95       	dec	r25
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	88 1f       	adc	r24, r24
     a92:	da f7       	brpl	.-10     	; 0xa8a <__floatsisf+0x62>
     a94:	88 0f       	add	r24, r24
     a96:	96 95       	lsr	r25
     a98:	87 95       	ror	r24
     a9a:	97 f9       	bld	r25, 7
     a9c:	08 95       	ret

00000a9e <__fp_cmp>:
     a9e:	99 0f       	add	r25, r25
     aa0:	00 08       	sbc	r0, r0
     aa2:	55 0f       	add	r21, r21
     aa4:	aa 0b       	sbc	r26, r26
     aa6:	e0 e8       	ldi	r30, 0x80	; 128
     aa8:	fe ef       	ldi	r31, 0xFE	; 254
     aaa:	16 16       	cp	r1, r22
     aac:	17 06       	cpc	r1, r23
     aae:	e8 07       	cpc	r30, r24
     ab0:	f9 07       	cpc	r31, r25
     ab2:	c0 f0       	brcs	.+48     	; 0xae4 <__fp_cmp+0x46>
     ab4:	12 16       	cp	r1, r18
     ab6:	13 06       	cpc	r1, r19
     ab8:	e4 07       	cpc	r30, r20
     aba:	f5 07       	cpc	r31, r21
     abc:	98 f0       	brcs	.+38     	; 0xae4 <__fp_cmp+0x46>
     abe:	62 1b       	sub	r22, r18
     ac0:	73 0b       	sbc	r23, r19
     ac2:	84 0b       	sbc	r24, r20
     ac4:	95 0b       	sbc	r25, r21
     ac6:	39 f4       	brne	.+14     	; 0xad6 <__fp_cmp+0x38>
     ac8:	0a 26       	eor	r0, r26
     aca:	61 f0       	breq	.+24     	; 0xae4 <__fp_cmp+0x46>
     acc:	23 2b       	or	r18, r19
     ace:	24 2b       	or	r18, r20
     ad0:	25 2b       	or	r18, r21
     ad2:	21 f4       	brne	.+8      	; 0xadc <__fp_cmp+0x3e>
     ad4:	08 95       	ret
     ad6:	0a 26       	eor	r0, r26
     ad8:	09 f4       	brne	.+2      	; 0xadc <__fp_cmp+0x3e>
     ada:	a1 40       	sbci	r26, 0x01	; 1
     adc:	a6 95       	lsr	r26
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	81 1d       	adc	r24, r1
     ae2:	81 1d       	adc	r24, r1
     ae4:	08 95       	ret

00000ae6 <__fp_inf>:
     ae6:	97 f9       	bld	r25, 7
     ae8:	9f 67       	ori	r25, 0x7F	; 127
     aea:	80 e8       	ldi	r24, 0x80	; 128
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	08 95       	ret

00000af2 <__fp_nan>:
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	80 ec       	ldi	r24, 0xC0	; 192
     af6:	08 95       	ret

00000af8 <__fp_pscA>:
     af8:	00 24       	eor	r0, r0
     afa:	0a 94       	dec	r0
     afc:	16 16       	cp	r1, r22
     afe:	17 06       	cpc	r1, r23
     b00:	18 06       	cpc	r1, r24
     b02:	09 06       	cpc	r0, r25
     b04:	08 95       	ret

00000b06 <__fp_pscB>:
     b06:	00 24       	eor	r0, r0
     b08:	0a 94       	dec	r0
     b0a:	12 16       	cp	r1, r18
     b0c:	13 06       	cpc	r1, r19
     b0e:	14 06       	cpc	r1, r20
     b10:	05 06       	cpc	r0, r21
     b12:	08 95       	ret

00000b14 <__fp_round>:
     b14:	09 2e       	mov	r0, r25
     b16:	03 94       	inc	r0
     b18:	00 0c       	add	r0, r0
     b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0xc>
     b1c:	88 23       	and	r24, r24
     b1e:	52 f0       	brmi	.+20     	; 0xb34 <__fp_round+0x20>
     b20:	bb 0f       	add	r27, r27
     b22:	40 f4       	brcc	.+16     	; 0xb34 <__fp_round+0x20>
     b24:	bf 2b       	or	r27, r31
     b26:	11 f4       	brne	.+4      	; 0xb2c <__fp_round+0x18>
     b28:	60 ff       	sbrs	r22, 0
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <__fp_round+0x20>
     b2c:	6f 5f       	subi	r22, 0xFF	; 255
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	8f 4f       	sbci	r24, 0xFF	; 255
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	08 95       	ret

00000b36 <__fp_split3>:
     b36:	57 fd       	sbrc	r21, 7
     b38:	90 58       	subi	r25, 0x80	; 128
     b3a:	44 0f       	add	r20, r20
     b3c:	55 1f       	adc	r21, r21
     b3e:	59 f0       	breq	.+22     	; 0xb56 <__fp_splitA+0x10>
     b40:	5f 3f       	cpi	r21, 0xFF	; 255
     b42:	71 f0       	breq	.+28     	; 0xb60 <__fp_splitA+0x1a>
     b44:	47 95       	ror	r20

00000b46 <__fp_splitA>:
     b46:	88 0f       	add	r24, r24
     b48:	97 fb       	bst	r25, 7
     b4a:	99 1f       	adc	r25, r25
     b4c:	61 f0       	breq	.+24     	; 0xb66 <__fp_splitA+0x20>
     b4e:	9f 3f       	cpi	r25, 0xFF	; 255
     b50:	79 f0       	breq	.+30     	; 0xb70 <__fp_splitA+0x2a>
     b52:	87 95       	ror	r24
     b54:	08 95       	ret
     b56:	12 16       	cp	r1, r18
     b58:	13 06       	cpc	r1, r19
     b5a:	14 06       	cpc	r1, r20
     b5c:	55 1f       	adc	r21, r21
     b5e:	f2 cf       	rjmp	.-28     	; 0xb44 <__fp_split3+0xe>
     b60:	46 95       	lsr	r20
     b62:	f1 df       	rcall	.-30     	; 0xb46 <__fp_splitA>
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <__fp_splitA+0x30>
     b66:	16 16       	cp	r1, r22
     b68:	17 06       	cpc	r1, r23
     b6a:	18 06       	cpc	r1, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	f1 cf       	rjmp	.-30     	; 0xb52 <__fp_splitA+0xc>
     b70:	86 95       	lsr	r24
     b72:	71 05       	cpc	r23, r1
     b74:	61 05       	cpc	r22, r1
     b76:	08 94       	sec
     b78:	08 95       	ret

00000b7a <__fp_zero>:
     b7a:	e8 94       	clt

00000b7c <__fp_szero>:
     b7c:	bb 27       	eor	r27, r27
     b7e:	66 27       	eor	r22, r22
     b80:	77 27       	eor	r23, r23
     b82:	cb 01       	movw	r24, r22
     b84:	97 f9       	bld	r25, 7
     b86:	08 95       	ret

00000b88 <__gesf2>:
     b88:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_cmp>
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <__gesf2+0x8>
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	08 95       	ret

00000b92 <__mulsf3>:
     b92:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__mulsf3x>
     b96:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
     b9a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
     b9e:	38 f0       	brcs	.+14     	; 0xbae <__mulsf3+0x1c>
     ba0:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
     ba4:	20 f0       	brcs	.+8      	; 0xbae <__mulsf3+0x1c>
     ba6:	95 23       	and	r25, r21
     ba8:	11 f0       	breq	.+4      	; 0xbae <__mulsf3+0x1c>
     baa:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
     bae:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
     bb2:	11 24       	eor	r1, r1
     bb4:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>

00000bb8 <__mulsf3x>:
     bb8:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
     bbc:	70 f3       	brcs	.-36     	; 0xb9a <__mulsf3+0x8>

00000bbe <__mulsf3_pse>:
     bbe:	95 9f       	mul	r25, r21
     bc0:	c1 f3       	breq	.-16     	; 0xbb2 <__mulsf3+0x20>
     bc2:	95 0f       	add	r25, r21
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	55 1f       	adc	r21, r21
     bc8:	62 9f       	mul	r22, r18
     bca:	f0 01       	movw	r30, r0
     bcc:	72 9f       	mul	r23, r18
     bce:	bb 27       	eor	r27, r27
     bd0:	f0 0d       	add	r31, r0
     bd2:	b1 1d       	adc	r27, r1
     bd4:	63 9f       	mul	r22, r19
     bd6:	aa 27       	eor	r26, r26
     bd8:	f0 0d       	add	r31, r0
     bda:	b1 1d       	adc	r27, r1
     bdc:	aa 1f       	adc	r26, r26
     bde:	64 9f       	mul	r22, r20
     be0:	66 27       	eor	r22, r22
     be2:	b0 0d       	add	r27, r0
     be4:	a1 1d       	adc	r26, r1
     be6:	66 1f       	adc	r22, r22
     be8:	82 9f       	mul	r24, r18
     bea:	22 27       	eor	r18, r18
     bec:	b0 0d       	add	r27, r0
     bee:	a1 1d       	adc	r26, r1
     bf0:	62 1f       	adc	r22, r18
     bf2:	73 9f       	mul	r23, r19
     bf4:	b0 0d       	add	r27, r0
     bf6:	a1 1d       	adc	r26, r1
     bf8:	62 1f       	adc	r22, r18
     bfa:	83 9f       	mul	r24, r19
     bfc:	a0 0d       	add	r26, r0
     bfe:	61 1d       	adc	r22, r1
     c00:	22 1f       	adc	r18, r18
     c02:	74 9f       	mul	r23, r20
     c04:	33 27       	eor	r19, r19
     c06:	a0 0d       	add	r26, r0
     c08:	61 1d       	adc	r22, r1
     c0a:	23 1f       	adc	r18, r19
     c0c:	84 9f       	mul	r24, r20
     c0e:	60 0d       	add	r22, r0
     c10:	21 1d       	adc	r18, r1
     c12:	82 2f       	mov	r24, r18
     c14:	76 2f       	mov	r23, r22
     c16:	6a 2f       	mov	r22, r26
     c18:	11 24       	eor	r1, r1
     c1a:	9f 57       	subi	r25, 0x7F	; 127
     c1c:	50 40       	sbci	r21, 0x00	; 0
     c1e:	9a f0       	brmi	.+38     	; 0xc46 <__mulsf3_pse+0x88>
     c20:	f1 f0       	breq	.+60     	; 0xc5e <__mulsf3_pse+0xa0>
     c22:	88 23       	and	r24, r24
     c24:	4a f0       	brmi	.+18     	; 0xc38 <__mulsf3_pse+0x7a>
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	bb 1f       	adc	r27, r27
     c2c:	66 1f       	adc	r22, r22
     c2e:	77 1f       	adc	r23, r23
     c30:	88 1f       	adc	r24, r24
     c32:	91 50       	subi	r25, 0x01	; 1
     c34:	50 40       	sbci	r21, 0x00	; 0
     c36:	a9 f7       	brne	.-22     	; 0xc22 <__mulsf3_pse+0x64>
     c38:	9e 3f       	cpi	r25, 0xFE	; 254
     c3a:	51 05       	cpc	r21, r1
     c3c:	80 f0       	brcs	.+32     	; 0xc5e <__mulsf3_pse+0xa0>
     c3e:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
     c42:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
     c46:	5f 3f       	cpi	r21, 0xFF	; 255
     c48:	e4 f3       	brlt	.-8      	; 0xc42 <__mulsf3_pse+0x84>
     c4a:	98 3e       	cpi	r25, 0xE8	; 232
     c4c:	d4 f3       	brlt	.-12     	; 0xc42 <__mulsf3_pse+0x84>
     c4e:	86 95       	lsr	r24
     c50:	77 95       	ror	r23
     c52:	67 95       	ror	r22
     c54:	b7 95       	ror	r27
     c56:	f7 95       	ror	r31
     c58:	e7 95       	ror	r30
     c5a:	9f 5f       	subi	r25, 0xFF	; 255
     c5c:	c1 f7       	brne	.-16     	; 0xc4e <__mulsf3_pse+0x90>
     c5e:	fe 2b       	or	r31, r30
     c60:	88 0f       	add	r24, r24
     c62:	91 1d       	adc	r25, r1
     c64:	96 95       	lsr	r25
     c66:	87 95       	ror	r24
     c68:	97 f9       	bld	r25, 7
     c6a:	08 95       	ret

00000c6c <strcmp>:
     c6c:	fb 01       	movw	r30, r22
     c6e:	dc 01       	movw	r26, r24
     c70:	8d 91       	ld	r24, X+
     c72:	01 90       	ld	r0, Z+
     c74:	80 19       	sub	r24, r0
     c76:	01 10       	cpse	r0, r1
     c78:	d9 f3       	breq	.-10     	; 0xc70 <strcmp+0x4>
     c7a:	99 0b       	sbc	r25, r25
     c7c:	08 95       	ret

00000c7e <sprintf>:
     c7e:	ae e0       	ldi	r26, 0x0E	; 14
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e5 e4       	ldi	r30, 0x45	; 69
     c84:	f6 e0       	ldi	r31, 0x06	; 6
     c86:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__prologue_saves__+0x1c>
     c8a:	0d 89       	ldd	r16, Y+21	; 0x15
     c8c:	1e 89       	ldd	r17, Y+22	; 0x16
     c8e:	86 e0       	ldi	r24, 0x06	; 6
     c90:	8c 83       	std	Y+4, r24	; 0x04
     c92:	1a 83       	std	Y+2, r17	; 0x02
     c94:	09 83       	std	Y+1, r16	; 0x01
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	9f e7       	ldi	r25, 0x7F	; 127
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	ae 01       	movw	r20, r28
     ca0:	47 5e       	subi	r20, 0xE7	; 231
     ca2:	5f 4f       	sbci	r21, 0xFF	; 255
     ca4:	6f 89       	ldd	r22, Y+23	; 0x17
     ca6:	78 8d       	ldd	r23, Y+24	; 0x18
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 61 06 	call	0xcc2	; 0xcc2 <vfprintf>
     cb0:	ef 81       	ldd	r30, Y+7	; 0x07
     cb2:	f8 85       	ldd	r31, Y+8	; 0x08
     cb4:	e0 0f       	add	r30, r16
     cb6:	f1 1f       	adc	r31, r17
     cb8:	10 82       	st	Z, r1
     cba:	2e 96       	adiw	r28, 0x0e	; 14
     cbc:	e4 e0       	ldi	r30, 0x04	; 4
     cbe:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__epilogue_restores__+0x1c>

00000cc2 <vfprintf>:
     cc2:	ab e0       	ldi	r26, 0x0B	; 11
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e6       	ldi	r30, 0x67	; 103
     cc8:	f6 e0       	ldi	r31, 0x06	; 6
     cca:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__prologue_saves__>
     cce:	6c 01       	movw	r12, r24
     cd0:	7b 01       	movw	r14, r22
     cd2:	8a 01       	movw	r16, r20
     cd4:	fc 01       	movw	r30, r24
     cd6:	17 82       	std	Z+7, r1	; 0x07
     cd8:	16 82       	std	Z+6, r1	; 0x06
     cda:	83 81       	ldd	r24, Z+3	; 0x03
     cdc:	81 ff       	sbrs	r24, 1
     cde:	cc c1       	rjmp	.+920    	; 0x1078 <vfprintf+0x3b6>
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	3c 01       	movw	r6, r24
     ce6:	f6 01       	movw	r30, r12
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
     cea:	f7 01       	movw	r30, r14
     cec:	93 fd       	sbrc	r25, 3
     cee:	85 91       	lpm	r24, Z+
     cf0:	93 ff       	sbrs	r25, 3
     cf2:	81 91       	ld	r24, Z+
     cf4:	7f 01       	movw	r14, r30
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <vfprintf+0x3a>
     cfa:	ba c1       	rjmp	.+884    	; 0x1070 <vfprintf+0x3ae>
     cfc:	85 32       	cpi	r24, 0x25	; 37
     cfe:	39 f4       	brne	.+14     	; 0xd0e <vfprintf+0x4c>
     d00:	93 fd       	sbrc	r25, 3
     d02:	85 91       	lpm	r24, Z+
     d04:	93 ff       	sbrs	r25, 3
     d06:	81 91       	ld	r24, Z+
     d08:	7f 01       	movw	r14, r30
     d0a:	85 32       	cpi	r24, 0x25	; 37
     d0c:	29 f4       	brne	.+10     	; 0xd18 <vfprintf+0x56>
     d0e:	b6 01       	movw	r22, r12
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
     d16:	e7 cf       	rjmp	.-50     	; 0xce6 <vfprintf+0x24>
     d18:	91 2c       	mov	r9, r1
     d1a:	21 2c       	mov	r2, r1
     d1c:	31 2c       	mov	r3, r1
     d1e:	ff e1       	ldi	r31, 0x1F	; 31
     d20:	f3 15       	cp	r31, r3
     d22:	d8 f0       	brcs	.+54     	; 0xd5a <vfprintf+0x98>
     d24:	8b 32       	cpi	r24, 0x2B	; 43
     d26:	79 f0       	breq	.+30     	; 0xd46 <vfprintf+0x84>
     d28:	38 f4       	brcc	.+14     	; 0xd38 <vfprintf+0x76>
     d2a:	80 32       	cpi	r24, 0x20	; 32
     d2c:	79 f0       	breq	.+30     	; 0xd4c <vfprintf+0x8a>
     d2e:	83 32       	cpi	r24, 0x23	; 35
     d30:	a1 f4       	brne	.+40     	; 0xd5a <vfprintf+0x98>
     d32:	23 2d       	mov	r18, r3
     d34:	20 61       	ori	r18, 0x10	; 16
     d36:	1d c0       	rjmp	.+58     	; 0xd72 <vfprintf+0xb0>
     d38:	8d 32       	cpi	r24, 0x2D	; 45
     d3a:	61 f0       	breq	.+24     	; 0xd54 <vfprintf+0x92>
     d3c:	80 33       	cpi	r24, 0x30	; 48
     d3e:	69 f4       	brne	.+26     	; 0xd5a <vfprintf+0x98>
     d40:	23 2d       	mov	r18, r3
     d42:	21 60       	ori	r18, 0x01	; 1
     d44:	16 c0       	rjmp	.+44     	; 0xd72 <vfprintf+0xb0>
     d46:	83 2d       	mov	r24, r3
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	38 2e       	mov	r3, r24
     d4c:	e3 2d       	mov	r30, r3
     d4e:	e4 60       	ori	r30, 0x04	; 4
     d50:	3e 2e       	mov	r3, r30
     d52:	2a c0       	rjmp	.+84     	; 0xda8 <vfprintf+0xe6>
     d54:	f3 2d       	mov	r31, r3
     d56:	f8 60       	ori	r31, 0x08	; 8
     d58:	1d c0       	rjmp	.+58     	; 0xd94 <vfprintf+0xd2>
     d5a:	37 fc       	sbrc	r3, 7
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <vfprintf+0xf6>
     d5e:	20 ed       	ldi	r18, 0xD0	; 208
     d60:	28 0f       	add	r18, r24
     d62:	2a 30       	cpi	r18, 0x0A	; 10
     d64:	40 f0       	brcs	.+16     	; 0xd76 <vfprintf+0xb4>
     d66:	8e 32       	cpi	r24, 0x2E	; 46
     d68:	b9 f4       	brne	.+46     	; 0xd98 <vfprintf+0xd6>
     d6a:	36 fc       	sbrc	r3, 6
     d6c:	81 c1       	rjmp	.+770    	; 0x1070 <vfprintf+0x3ae>
     d6e:	23 2d       	mov	r18, r3
     d70:	20 64       	ori	r18, 0x40	; 64
     d72:	32 2e       	mov	r3, r18
     d74:	19 c0       	rjmp	.+50     	; 0xda8 <vfprintf+0xe6>
     d76:	36 fe       	sbrs	r3, 6
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <vfprintf+0xc4>
     d7a:	8a e0       	ldi	r24, 0x0A	; 10
     d7c:	98 9e       	mul	r9, r24
     d7e:	20 0d       	add	r18, r0
     d80:	11 24       	eor	r1, r1
     d82:	92 2e       	mov	r9, r18
     d84:	11 c0       	rjmp	.+34     	; 0xda8 <vfprintf+0xe6>
     d86:	ea e0       	ldi	r30, 0x0A	; 10
     d88:	2e 9e       	mul	r2, r30
     d8a:	20 0d       	add	r18, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	22 2e       	mov	r2, r18
     d90:	f3 2d       	mov	r31, r3
     d92:	f0 62       	ori	r31, 0x20	; 32
     d94:	3f 2e       	mov	r3, r31
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <vfprintf+0xe6>
     d98:	8c 36       	cpi	r24, 0x6C	; 108
     d9a:	21 f4       	brne	.+8      	; 0xda4 <vfprintf+0xe2>
     d9c:	83 2d       	mov	r24, r3
     d9e:	80 68       	ori	r24, 0x80	; 128
     da0:	38 2e       	mov	r3, r24
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <vfprintf+0xe6>
     da4:	88 36       	cpi	r24, 0x68	; 104
     da6:	41 f4       	brne	.+16     	; 0xdb8 <vfprintf+0xf6>
     da8:	f7 01       	movw	r30, r14
     daa:	93 fd       	sbrc	r25, 3
     dac:	85 91       	lpm	r24, Z+
     dae:	93 ff       	sbrs	r25, 3
     db0:	81 91       	ld	r24, Z+
     db2:	7f 01       	movw	r14, r30
     db4:	81 11       	cpse	r24, r1
     db6:	b3 cf       	rjmp	.-154    	; 0xd1e <vfprintf+0x5c>
     db8:	98 2f       	mov	r25, r24
     dba:	9f 7d       	andi	r25, 0xDF	; 223
     dbc:	95 54       	subi	r25, 0x45	; 69
     dbe:	93 30       	cpi	r25, 0x03	; 3
     dc0:	28 f4       	brcc	.+10     	; 0xdcc <vfprintf+0x10a>
     dc2:	0c 5f       	subi	r16, 0xFC	; 252
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	9f e3       	ldi	r25, 0x3F	; 63
     dc8:	99 83       	std	Y+1, r25	; 0x01
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <vfprintf+0x124>
     dcc:	83 36       	cpi	r24, 0x63	; 99
     dce:	31 f0       	breq	.+12     	; 0xddc <vfprintf+0x11a>
     dd0:	83 37       	cpi	r24, 0x73	; 115
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <vfprintf+0x12e>
     dd4:	83 35       	cpi	r24, 0x53	; 83
     dd6:	09 f0       	breq	.+2      	; 0xdda <vfprintf+0x118>
     dd8:	59 c0       	rjmp	.+178    	; 0xe8c <vfprintf+0x1ca>
     dda:	21 c0       	rjmp	.+66     	; 0xe1e <vfprintf+0x15c>
     ddc:	f8 01       	movw	r30, r16
     dde:	80 81       	ld	r24, Z
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	0e 5f       	subi	r16, 0xFE	; 254
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	88 24       	eor	r8, r8
     de8:	83 94       	inc	r8
     dea:	91 2c       	mov	r9, r1
     dec:	53 01       	movw	r10, r6
     dee:	13 c0       	rjmp	.+38     	; 0xe16 <vfprintf+0x154>
     df0:	28 01       	movw	r4, r16
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	4f 0e       	add	r4, r31
     df6:	51 1c       	adc	r5, r1
     df8:	f8 01       	movw	r30, r16
     dfa:	a0 80       	ld	r10, Z
     dfc:	b1 80       	ldd	r11, Z+1	; 0x01
     dfe:	36 fe       	sbrs	r3, 6
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <vfprintf+0x146>
     e02:	69 2d       	mov	r22, r9
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vfprintf+0x14a>
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	7f ef       	ldi	r23, 0xFF	; 255
     e0c:	c5 01       	movw	r24, r10
     e0e:	0e 94 4d 08 	call	0x109a	; 0x109a <strnlen>
     e12:	4c 01       	movw	r8, r24
     e14:	82 01       	movw	r16, r4
     e16:	f3 2d       	mov	r31, r3
     e18:	ff 77       	andi	r31, 0x7F	; 127
     e1a:	3f 2e       	mov	r3, r31
     e1c:	16 c0       	rjmp	.+44     	; 0xe4a <vfprintf+0x188>
     e1e:	28 01       	movw	r4, r16
     e20:	22 e0       	ldi	r18, 0x02	; 2
     e22:	42 0e       	add	r4, r18
     e24:	51 1c       	adc	r5, r1
     e26:	f8 01       	movw	r30, r16
     e28:	a0 80       	ld	r10, Z
     e2a:	b1 80       	ldd	r11, Z+1	; 0x01
     e2c:	36 fe       	sbrs	r3, 6
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <vfprintf+0x174>
     e30:	69 2d       	mov	r22, r9
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x178>
     e36:	6f ef       	ldi	r22, 0xFF	; 255
     e38:	7f ef       	ldi	r23, 0xFF	; 255
     e3a:	c5 01       	movw	r24, r10
     e3c:	0e 94 42 08 	call	0x1084	; 0x1084 <strnlen_P>
     e40:	4c 01       	movw	r8, r24
     e42:	f3 2d       	mov	r31, r3
     e44:	f0 68       	ori	r31, 0x80	; 128
     e46:	3f 2e       	mov	r3, r31
     e48:	82 01       	movw	r16, r4
     e4a:	33 fc       	sbrc	r3, 3
     e4c:	1b c0       	rjmp	.+54     	; 0xe84 <vfprintf+0x1c2>
     e4e:	82 2d       	mov	r24, r2
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 16       	cp	r8, r24
     e54:	99 06       	cpc	r9, r25
     e56:	b0 f4       	brcc	.+44     	; 0xe84 <vfprintf+0x1c2>
     e58:	b6 01       	movw	r22, r12
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
     e62:	2a 94       	dec	r2
     e64:	f4 cf       	rjmp	.-24     	; 0xe4e <vfprintf+0x18c>
     e66:	f5 01       	movw	r30, r10
     e68:	37 fc       	sbrc	r3, 7
     e6a:	85 91       	lpm	r24, Z+
     e6c:	37 fe       	sbrs	r3, 7
     e6e:	81 91       	ld	r24, Z+
     e70:	5f 01       	movw	r10, r30
     e72:	b6 01       	movw	r22, r12
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
     e7a:	21 10       	cpse	r2, r1
     e7c:	2a 94       	dec	r2
     e7e:	21 e0       	ldi	r18, 0x01	; 1
     e80:	82 1a       	sub	r8, r18
     e82:	91 08       	sbc	r9, r1
     e84:	81 14       	cp	r8, r1
     e86:	91 04       	cpc	r9, r1
     e88:	71 f7       	brne	.-36     	; 0xe66 <vfprintf+0x1a4>
     e8a:	e8 c0       	rjmp	.+464    	; 0x105c <vfprintf+0x39a>
     e8c:	84 36       	cpi	r24, 0x64	; 100
     e8e:	11 f0       	breq	.+4      	; 0xe94 <vfprintf+0x1d2>
     e90:	89 36       	cpi	r24, 0x69	; 105
     e92:	41 f5       	brne	.+80     	; 0xee4 <vfprintf+0x222>
     e94:	f8 01       	movw	r30, r16
     e96:	37 fe       	sbrs	r3, 7
     e98:	07 c0       	rjmp	.+14     	; 0xea8 <vfprintf+0x1e6>
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	0c 5f       	subi	r16, 0xFC	; 252
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	08 c0       	rjmp	.+16     	; 0xeb8 <vfprintf+0x1f6>
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	07 2e       	mov	r0, r23
     eae:	00 0c       	add	r0, r0
     eb0:	88 0b       	sbc	r24, r24
     eb2:	99 0b       	sbc	r25, r25
     eb4:	0e 5f       	subi	r16, 0xFE	; 254
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
     eb8:	f3 2d       	mov	r31, r3
     eba:	ff 76       	andi	r31, 0x6F	; 111
     ebc:	3f 2e       	mov	r3, r31
     ebe:	97 ff       	sbrs	r25, 7
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <vfprintf+0x212>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	f0 68       	ori	r31, 0x80	; 128
     ed2:	3f 2e       	mov	r3, r31
     ed4:	2a e0       	ldi	r18, 0x0A	; 10
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	a3 01       	movw	r20, r6
     eda:	0e 94 94 08 	call	0x1128	; 0x1128 <__ultoa_invert>
     ede:	88 2e       	mov	r8, r24
     ee0:	86 18       	sub	r8, r6
     ee2:	45 c0       	rjmp	.+138    	; 0xf6e <vfprintf+0x2ac>
     ee4:	85 37       	cpi	r24, 0x75	; 117
     ee6:	31 f4       	brne	.+12     	; 0xef4 <vfprintf+0x232>
     ee8:	23 2d       	mov	r18, r3
     eea:	2f 7e       	andi	r18, 0xEF	; 239
     eec:	b2 2e       	mov	r11, r18
     eee:	2a e0       	ldi	r18, 0x0A	; 10
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	25 c0       	rjmp	.+74     	; 0xf3e <vfprintf+0x27c>
     ef4:	93 2d       	mov	r25, r3
     ef6:	99 7f       	andi	r25, 0xF9	; 249
     ef8:	b9 2e       	mov	r11, r25
     efa:	8f 36       	cpi	r24, 0x6F	; 111
     efc:	c1 f0       	breq	.+48     	; 0xf2e <vfprintf+0x26c>
     efe:	18 f4       	brcc	.+6      	; 0xf06 <vfprintf+0x244>
     f00:	88 35       	cpi	r24, 0x58	; 88
     f02:	79 f0       	breq	.+30     	; 0xf22 <vfprintf+0x260>
     f04:	b5 c0       	rjmp	.+362    	; 0x1070 <vfprintf+0x3ae>
     f06:	80 37       	cpi	r24, 0x70	; 112
     f08:	19 f0       	breq	.+6      	; 0xf10 <vfprintf+0x24e>
     f0a:	88 37       	cpi	r24, 0x78	; 120
     f0c:	21 f0       	breq	.+8      	; 0xf16 <vfprintf+0x254>
     f0e:	b0 c0       	rjmp	.+352    	; 0x1070 <vfprintf+0x3ae>
     f10:	e9 2f       	mov	r30, r25
     f12:	e0 61       	ori	r30, 0x10	; 16
     f14:	be 2e       	mov	r11, r30
     f16:	b4 fe       	sbrs	r11, 4
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <vfprintf+0x272>
     f1a:	fb 2d       	mov	r31, r11
     f1c:	f4 60       	ori	r31, 0x04	; 4
     f1e:	bf 2e       	mov	r11, r31
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x272>
     f22:	34 fe       	sbrs	r3, 4
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <vfprintf+0x278>
     f26:	29 2f       	mov	r18, r25
     f28:	26 60       	ori	r18, 0x06	; 6
     f2a:	b2 2e       	mov	r11, r18
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0x278>
     f2e:	28 e0       	ldi	r18, 0x08	; 8
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <vfprintf+0x27c>
     f34:	20 e1       	ldi	r18, 0x10	; 16
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0x27c>
     f3a:	20 e1       	ldi	r18, 0x10	; 16
     f3c:	32 e0       	ldi	r19, 0x02	; 2
     f3e:	f8 01       	movw	r30, r16
     f40:	b7 fe       	sbrs	r11, 7
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <vfprintf+0x290>
     f44:	60 81       	ld	r22, Z
     f46:	71 81       	ldd	r23, Z+1	; 0x01
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	0c 5f       	subi	r16, 0xFC	; 252
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x29c>
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 5f       	subi	r16, 0xFE	; 254
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	a3 01       	movw	r20, r6
     f60:	0e 94 94 08 	call	0x1128	; 0x1128 <__ultoa_invert>
     f64:	88 2e       	mov	r8, r24
     f66:	86 18       	sub	r8, r6
     f68:	fb 2d       	mov	r31, r11
     f6a:	ff 77       	andi	r31, 0x7F	; 127
     f6c:	3f 2e       	mov	r3, r31
     f6e:	36 fe       	sbrs	r3, 6
     f70:	0d c0       	rjmp	.+26     	; 0xf8c <vfprintf+0x2ca>
     f72:	23 2d       	mov	r18, r3
     f74:	2e 7f       	andi	r18, 0xFE	; 254
     f76:	a2 2e       	mov	r10, r18
     f78:	89 14       	cp	r8, r9
     f7a:	58 f4       	brcc	.+22     	; 0xf92 <vfprintf+0x2d0>
     f7c:	34 fe       	sbrs	r3, 4
     f7e:	0b c0       	rjmp	.+22     	; 0xf96 <vfprintf+0x2d4>
     f80:	32 fc       	sbrc	r3, 2
     f82:	09 c0       	rjmp	.+18     	; 0xf96 <vfprintf+0x2d4>
     f84:	83 2d       	mov	r24, r3
     f86:	8e 7e       	andi	r24, 0xEE	; 238
     f88:	a8 2e       	mov	r10, r24
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <vfprintf+0x2d4>
     f8c:	b8 2c       	mov	r11, r8
     f8e:	a3 2c       	mov	r10, r3
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <vfprintf+0x2d6>
     f92:	b8 2c       	mov	r11, r8
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <vfprintf+0x2d6>
     f96:	b9 2c       	mov	r11, r9
     f98:	a4 fe       	sbrs	r10, 4
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <vfprintf+0x2f8>
     f9c:	fe 01       	movw	r30, r28
     f9e:	e8 0d       	add	r30, r8
     fa0:	f1 1d       	adc	r31, r1
     fa2:	80 81       	ld	r24, Z
     fa4:	80 33       	cpi	r24, 0x30	; 48
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <vfprintf+0x2ee>
     fa8:	9a 2d       	mov	r25, r10
     faa:	99 7e       	andi	r25, 0xE9	; 233
     fac:	a9 2e       	mov	r10, r25
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <vfprintf+0x300>
     fb0:	a2 fe       	sbrs	r10, 2
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <vfprintf+0x2fe>
     fb4:	b3 94       	inc	r11
     fb6:	b3 94       	inc	r11
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <vfprintf+0x300>
     fba:	8a 2d       	mov	r24, r10
     fbc:	86 78       	andi	r24, 0x86	; 134
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <vfprintf+0x300>
     fc0:	b3 94       	inc	r11
     fc2:	a3 fc       	sbrc	r10, 3
     fc4:	11 c0       	rjmp	.+34     	; 0xfe8 <vfprintf+0x326>
     fc6:	a0 fe       	sbrs	r10, 0
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <vfprintf+0x314>
     fca:	b2 14       	cp	r11, r2
     fcc:	88 f4       	brcc	.+34     	; 0xff0 <vfprintf+0x32e>
     fce:	28 0c       	add	r2, r8
     fd0:	92 2c       	mov	r9, r2
     fd2:	9b 18       	sub	r9, r11
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <vfprintf+0x330>
     fd6:	b2 14       	cp	r11, r2
     fd8:	60 f4       	brcc	.+24     	; 0xff2 <vfprintf+0x330>
     fda:	b6 01       	movw	r22, r12
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
     fe4:	b3 94       	inc	r11
     fe6:	f7 cf       	rjmp	.-18     	; 0xfd6 <vfprintf+0x314>
     fe8:	b2 14       	cp	r11, r2
     fea:	18 f4       	brcc	.+6      	; 0xff2 <vfprintf+0x330>
     fec:	2b 18       	sub	r2, r11
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0x332>
     ff0:	98 2c       	mov	r9, r8
     ff2:	21 2c       	mov	r2, r1
     ff4:	a4 fe       	sbrs	r10, 4
     ff6:	10 c0       	rjmp	.+32     	; 0x1018 <vfprintf+0x356>
     ff8:	b6 01       	movw	r22, r12
     ffa:	80 e3       	ldi	r24, 0x30	; 48
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
    1002:	a2 fe       	sbrs	r10, 2
    1004:	17 c0       	rjmp	.+46     	; 0x1034 <vfprintf+0x372>
    1006:	a1 fc       	sbrc	r10, 1
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <vfprintf+0x34e>
    100a:	88 e7       	ldi	r24, 0x78	; 120
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <vfprintf+0x352>
    1010:	88 e5       	ldi	r24, 0x58	; 88
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	b6 01       	movw	r22, r12
    1016:	0c c0       	rjmp	.+24     	; 0x1030 <vfprintf+0x36e>
    1018:	8a 2d       	mov	r24, r10
    101a:	86 78       	andi	r24, 0x86	; 134
    101c:	59 f0       	breq	.+22     	; 0x1034 <vfprintf+0x372>
    101e:	a1 fe       	sbrs	r10, 1
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <vfprintf+0x364>
    1022:	8b e2       	ldi	r24, 0x2B	; 43
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <vfprintf+0x366>
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	a7 fc       	sbrc	r10, 7
    102a:	8d e2       	ldi	r24, 0x2D	; 45
    102c:	b6 01       	movw	r22, r12
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
    1034:	89 14       	cp	r8, r9
    1036:	38 f4       	brcc	.+14     	; 0x1046 <vfprintf+0x384>
    1038:	b6 01       	movw	r22, r12
    103a:	80 e3       	ldi	r24, 0x30	; 48
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
    1042:	9a 94       	dec	r9
    1044:	f7 cf       	rjmp	.-18     	; 0x1034 <vfprintf+0x372>
    1046:	8a 94       	dec	r8
    1048:	f3 01       	movw	r30, r6
    104a:	e8 0d       	add	r30, r8
    104c:	f1 1d       	adc	r31, r1
    104e:	80 81       	ld	r24, Z
    1050:	b6 01       	movw	r22, r12
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
    1058:	81 10       	cpse	r8, r1
    105a:	f5 cf       	rjmp	.-22     	; 0x1046 <vfprintf+0x384>
    105c:	22 20       	and	r2, r2
    105e:	09 f4       	brne	.+2      	; 0x1062 <vfprintf+0x3a0>
    1060:	42 ce       	rjmp	.-892    	; 0xce6 <vfprintf+0x24>
    1062:	b6 01       	movw	r22, r12
    1064:	80 e2       	ldi	r24, 0x20	; 32
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 58 08 	call	0x10b0	; 0x10b0 <fputc>
    106c:	2a 94       	dec	r2
    106e:	f6 cf       	rjmp	.-20     	; 0x105c <vfprintf+0x39a>
    1070:	f6 01       	movw	r30, r12
    1072:	86 81       	ldd	r24, Z+6	; 0x06
    1074:	97 81       	ldd	r25, Z+7	; 0x07
    1076:	02 c0       	rjmp	.+4      	; 0x107c <vfprintf+0x3ba>
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	9f ef       	ldi	r25, 0xFF	; 255
    107c:	2b 96       	adiw	r28, 0x0b	; 11
    107e:	e2 e1       	ldi	r30, 0x12	; 18
    1080:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__epilogue_restores__>

00001084 <strnlen_P>:
    1084:	fc 01       	movw	r30, r24
    1086:	05 90       	lpm	r0, Z+
    1088:	61 50       	subi	r22, 0x01	; 1
    108a:	70 40       	sbci	r23, 0x00	; 0
    108c:	01 10       	cpse	r0, r1
    108e:	d8 f7       	brcc	.-10     	; 0x1086 <strnlen_P+0x2>
    1090:	80 95       	com	r24
    1092:	90 95       	com	r25
    1094:	8e 0f       	add	r24, r30
    1096:	9f 1f       	adc	r25, r31
    1098:	08 95       	ret

0000109a <strnlen>:
    109a:	fc 01       	movw	r30, r24
    109c:	61 50       	subi	r22, 0x01	; 1
    109e:	70 40       	sbci	r23, 0x00	; 0
    10a0:	01 90       	ld	r0, Z+
    10a2:	01 10       	cpse	r0, r1
    10a4:	d8 f7       	brcc	.-10     	; 0x109c <strnlen+0x2>
    10a6:	80 95       	com	r24
    10a8:	90 95       	com	r25
    10aa:	8e 0f       	add	r24, r30
    10ac:	9f 1f       	adc	r25, r31
    10ae:	08 95       	ret

000010b0 <fputc>:
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	fb 01       	movw	r30, r22
    10ba:	23 81       	ldd	r18, Z+3	; 0x03
    10bc:	21 fd       	sbrc	r18, 1
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <fputc+0x16>
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	2c c0       	rjmp	.+88     	; 0x111e <fputc+0x6e>
    10c6:	22 ff       	sbrs	r18, 2
    10c8:	16 c0       	rjmp	.+44     	; 0x10f6 <fputc+0x46>
    10ca:	46 81       	ldd	r20, Z+6	; 0x06
    10cc:	57 81       	ldd	r21, Z+7	; 0x07
    10ce:	24 81       	ldd	r18, Z+4	; 0x04
    10d0:	35 81       	ldd	r19, Z+5	; 0x05
    10d2:	42 17       	cp	r20, r18
    10d4:	53 07       	cpc	r21, r19
    10d6:	44 f4       	brge	.+16     	; 0x10e8 <fputc+0x38>
    10d8:	a0 81       	ld	r26, Z
    10da:	b1 81       	ldd	r27, Z+1	; 0x01
    10dc:	9d 01       	movw	r18, r26
    10de:	2f 5f       	subi	r18, 0xFF	; 255
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	31 83       	std	Z+1, r19	; 0x01
    10e4:	20 83       	st	Z, r18
    10e6:	8c 93       	st	X, r24
    10e8:	26 81       	ldd	r18, Z+6	; 0x06
    10ea:	37 81       	ldd	r19, Z+7	; 0x07
    10ec:	2f 5f       	subi	r18, 0xFF	; 255
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	37 83       	std	Z+7, r19	; 0x07
    10f2:	26 83       	std	Z+6, r18	; 0x06
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <fputc+0x6e>
    10f6:	8b 01       	movw	r16, r22
    10f8:	ec 01       	movw	r28, r24
    10fa:	fb 01       	movw	r30, r22
    10fc:	00 84       	ldd	r0, Z+8	; 0x08
    10fe:	f1 85       	ldd	r31, Z+9	; 0x09
    1100:	e0 2d       	mov	r30, r0
    1102:	09 95       	icall
    1104:	89 2b       	or	r24, r25
    1106:	e1 f6       	brne	.-72     	; 0x10c0 <fputc+0x10>
    1108:	d8 01       	movw	r26, r16
    110a:	16 96       	adiw	r26, 0x06	; 6
    110c:	8d 91       	ld	r24, X+
    110e:	9c 91       	ld	r25, X
    1110:	17 97       	sbiw	r26, 0x07	; 7
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	17 96       	adiw	r26, 0x07	; 7
    1116:	9c 93       	st	X, r25
    1118:	8e 93       	st	-X, r24
    111a:	16 97       	sbiw	r26, 0x06	; 6
    111c:	ce 01       	movw	r24, r28
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <__ultoa_invert>:
    1128:	fa 01       	movw	r30, r20
    112a:	aa 27       	eor	r26, r26
    112c:	28 30       	cpi	r18, 0x08	; 8
    112e:	51 f1       	breq	.+84     	; 0x1184 <__ultoa_invert+0x5c>
    1130:	20 31       	cpi	r18, 0x10	; 16
    1132:	81 f1       	breq	.+96     	; 0x1194 <__ultoa_invert+0x6c>
    1134:	e8 94       	clt
    1136:	6f 93       	push	r22
    1138:	6e 7f       	andi	r22, 0xFE	; 254
    113a:	6e 5f       	subi	r22, 0xFE	; 254
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	af 4f       	sbci	r26, 0xFF	; 255
    1144:	b1 e0       	ldi	r27, 0x01	; 1
    1146:	3e d0       	rcall	.+124    	; 0x11c4 <__ultoa_invert+0x9c>
    1148:	b4 e0       	ldi	r27, 0x04	; 4
    114a:	3c d0       	rcall	.+120    	; 0x11c4 <__ultoa_invert+0x9c>
    114c:	67 0f       	add	r22, r23
    114e:	78 1f       	adc	r23, r24
    1150:	89 1f       	adc	r24, r25
    1152:	9a 1f       	adc	r25, r26
    1154:	a1 1d       	adc	r26, r1
    1156:	68 0f       	add	r22, r24
    1158:	79 1f       	adc	r23, r25
    115a:	8a 1f       	adc	r24, r26
    115c:	91 1d       	adc	r25, r1
    115e:	a1 1d       	adc	r26, r1
    1160:	6a 0f       	add	r22, r26
    1162:	71 1d       	adc	r23, r1
    1164:	81 1d       	adc	r24, r1
    1166:	91 1d       	adc	r25, r1
    1168:	a1 1d       	adc	r26, r1
    116a:	20 d0       	rcall	.+64     	; 0x11ac <__ultoa_invert+0x84>
    116c:	09 f4       	brne	.+2      	; 0x1170 <__ultoa_invert+0x48>
    116e:	68 94       	set
    1170:	3f 91       	pop	r19
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	26 9f       	mul	r18, r22
    1176:	11 24       	eor	r1, r1
    1178:	30 19       	sub	r19, r0
    117a:	30 5d       	subi	r19, 0xD0	; 208
    117c:	31 93       	st	Z+, r19
    117e:	de f6       	brtc	.-74     	; 0x1136 <__ultoa_invert+0xe>
    1180:	cf 01       	movw	r24, r30
    1182:	08 95       	ret
    1184:	46 2f       	mov	r20, r22
    1186:	47 70       	andi	r20, 0x07	; 7
    1188:	40 5d       	subi	r20, 0xD0	; 208
    118a:	41 93       	st	Z+, r20
    118c:	b3 e0       	ldi	r27, 0x03	; 3
    118e:	0f d0       	rcall	.+30     	; 0x11ae <__ultoa_invert+0x86>
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__ultoa_invert+0x5c>
    1192:	f6 cf       	rjmp	.-20     	; 0x1180 <__ultoa_invert+0x58>
    1194:	46 2f       	mov	r20, r22
    1196:	4f 70       	andi	r20, 0x0F	; 15
    1198:	40 5d       	subi	r20, 0xD0	; 208
    119a:	4a 33       	cpi	r20, 0x3A	; 58
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <__ultoa_invert+0x7c>
    119e:	49 5d       	subi	r20, 0xD9	; 217
    11a0:	31 fd       	sbrc	r19, 1
    11a2:	40 52       	subi	r20, 0x20	; 32
    11a4:	41 93       	st	Z+, r20
    11a6:	02 d0       	rcall	.+4      	; 0x11ac <__ultoa_invert+0x84>
    11a8:	a9 f7       	brne	.-22     	; 0x1194 <__ultoa_invert+0x6c>
    11aa:	ea cf       	rjmp	.-44     	; 0x1180 <__ultoa_invert+0x58>
    11ac:	b4 e0       	ldi	r27, 0x04	; 4
    11ae:	a6 95       	lsr	r26
    11b0:	97 95       	ror	r25
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	ba 95       	dec	r27
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__ultoa_invert+0x86>
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	61 05       	cpc	r22, r1
    11c0:	71 05       	cpc	r23, r1
    11c2:	08 95       	ret
    11c4:	9b 01       	movw	r18, r22
    11c6:	ac 01       	movw	r20, r24
    11c8:	0a 2e       	mov	r0, r26
    11ca:	06 94       	lsr	r0
    11cc:	57 95       	ror	r21
    11ce:	47 95       	ror	r20
    11d0:	37 95       	ror	r19
    11d2:	27 95       	ror	r18
    11d4:	ba 95       	dec	r27
    11d6:	c9 f7       	brne	.-14     	; 0x11ca <__ultoa_invert+0xa2>
    11d8:	62 0f       	add	r22, r18
    11da:	73 1f       	adc	r23, r19
    11dc:	84 1f       	adc	r24, r20
    11de:	95 1f       	adc	r25, r21
    11e0:	a0 1d       	adc	r26, r0
    11e2:	08 95       	ret

000011e4 <__prologue_saves__>:
    11e4:	2f 92       	push	r2
    11e6:	3f 92       	push	r3
    11e8:	4f 92       	push	r4
    11ea:	5f 92       	push	r5
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	ca 1b       	sub	r28, r26
    120e:	db 0b       	sbc	r29, r27
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	09 94       	ijmp

0000121c <__epilogue_restores__>:
    121c:	2a 88       	ldd	r2, Y+18	; 0x12
    121e:	39 88       	ldd	r3, Y+17	; 0x11
    1220:	48 88       	ldd	r4, Y+16	; 0x10
    1222:	5f 84       	ldd	r5, Y+15	; 0x0f
    1224:	6e 84       	ldd	r6, Y+14	; 0x0e
    1226:	7d 84       	ldd	r7, Y+13	; 0x0d
    1228:	8c 84       	ldd	r8, Y+12	; 0x0c
    122a:	9b 84       	ldd	r9, Y+11	; 0x0b
    122c:	aa 84       	ldd	r10, Y+10	; 0x0a
    122e:	b9 84       	ldd	r11, Y+9	; 0x09
    1230:	c8 84       	ldd	r12, Y+8	; 0x08
    1232:	df 80       	ldd	r13, Y+7	; 0x07
    1234:	ee 80       	ldd	r14, Y+6	; 0x06
    1236:	fd 80       	ldd	r15, Y+5	; 0x05
    1238:	0c 81       	ldd	r16, Y+4	; 0x04
    123a:	1b 81       	ldd	r17, Y+3	; 0x03
    123c:	aa 81       	ldd	r26, Y+2	; 0x02
    123e:	b9 81       	ldd	r27, Y+1	; 0x01
    1240:	ce 0f       	add	r28, r30
    1242:	d1 1d       	adc	r29, r1
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	ed 01       	movw	r28, r26
    1250:	08 95       	ret

00001252 <_exit>:
    1252:	f8 94       	cli

00001254 <__stop_program>:
    1254:	ff cf       	rjmp	.-2      	; 0x1254 <__stop_program>
